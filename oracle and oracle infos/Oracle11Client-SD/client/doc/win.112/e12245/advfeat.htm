<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta http-equiv="Content-Language" content="en" />
<meta http-equiv="Content-Style-Type" content="text/css" />
<meta http-equiv="Content-Script-Type" content="text/javascript" />
<meta name="robots" content="all" scheme="http://www.robotstxt.org/" />
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.1 Build 026" />
<meta name="Date" content="2010-01-21T17:54:47Z" />
<meta name="doctitle" content="Oracle&reg; Objects for OLE Developer's Guide 11g Release 2 (11.2) for Microsoft Windows" />
<meta name="partno" content="E12245-01" />
<meta name="docid" content="OOFOL" />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />
<link rel="Stylesheet" href="../../dcommon/css/blafdoc.css" title="Default" type="text/css" />
<script type="text/javascript" src="../../dcommon/js/doccd.js">
</script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Glossary" href="glossary.htm" title="Glossary" type="text/html" />
<link rel="Prev" href="basfeat.htm" title="Previous" type="text/html" />
<link rel="Next" href="tips.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e12245.pdf" title="PDF version" type="application/pdf" />
<title>Advanced OO4O Features</title>
</head>
<body>
<div class="header">
<div class="zz-skip-header"><a name="top" id="top" href="#BEGIN">Skip Headers</a></div>
<table class="simple oac_no_warn" summary="" cellspacing="0" cellpadding="0" width="100%">
<tr>
<td align="left" valign="top"><b>Oracle&reg; Objects for OLE Developer's Guide<br />
11<i>g</i> Release 2 (11.2) for Microsoft Windows</b><br />
Part Number E12245-01</td>
<td valign="bottom" align="right">
<table class="icons oac_no_warn" summary="" cellspacing="0" cellpadding="0" width="245">
<tr>
<td align="center" valign="top"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td align="center" valign="top"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td align="center" valign="top"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td align="center" valign="top"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td align="center" valign="top"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
<hr />
<table class="simple oac_no_warn" summary="" cellspacing="0" cellpadding="0" width="100%">
<tr>
<td align="left" valign="top">
<table class="simple oac_no_warn" summary="" cellspacing="0" cellpadding="0" width="98">
<tr>
<td align="center" valign="top"><a href="basfeat.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td align="center" valign="top"><a href="tips.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td align="right" valign="top" style="font-size: 90%"><a href="../e12245.pdf">View PDF</a></td>
</tr>
</table>
<a name="BEGIN" id="BEGIN"></a></div>
<div class="IND"><!-- End Header --><a id="BABHCCJB" name="BABHCCJB"></a><a id="OOFOL0004" name="OOFOL0004"></a>
<h1 class="chapter"><span class="secnum">4</span> <a id="sthref220" name="sthref220"></a><a id="sthref221" name="sthref221"></a>Advanced OO4O Features</h1>
<p>This chapter describes advanced Oracle Objects for OLE features.This chapter contains these topics:</p>
<ul>
<li>
<p><a href="#BGBCDAHH">Support for Oracle Object-Relational and LOB Data Types</a></p>
</li>
<li>
<p><a href="#BGBHIIHH">Instantiating Oracle LOBs, Objects, and Collections</a></p>
</li>
<li>
<p><a href="#BGBCIACB">Using Large Objects (LOBs)</a></p>
</li>
<li>
<p><a href="#BGBIFHEA">Oracle Object Data Types</a></p>
</li>
<li>
<p><a href="#BGBCEDFA">Oracle Collections</a></p>
</li>
<li>
<p><a href="#BGBBDADI">Advanced Queueing Interfaces</a></p>
</li>
<li>
<p><a href="#BGBHHEIH">Database Events</a></p>
</li>
<li>
<p><a href="#CIHGBCIA">Application Failover Notifications</a></p>
</li>
<li>
<p><a href="#BGBJAIAD">XML Generation</a></p>
</li>
<li>
<p><a href="#BGBBDGHE">Datetime and Interval Data Types</a></p>
</li>
<li>
<p><a href="#BGBHHBHE">Database Schema Objects</a></p>
</li>
</ul>
<a id="BGBCDAHH" name="BGBCDAHH"></a><a id="OOFOL177" name="OOFOL177"></a>
<div class="sect1">
<h2 class="sect1"><a id="sthref222" name="sthref222"></a><a id="sthref223" name="sthref223"></a><a id="sthref224" name="sthref224"></a><a id="sthref225" name="sthref225"></a><a id="sthref226" name="sthref226"></a><a id="sthref227" name="sthref227"></a>Support for Oracle Object-Relational and LOB Data Types</h2>
<p>Oracle Objects for OLE provides support for accessing and manipulating instances of REFs, value instances, variable-length arrays (<code>VARRAY</code>s), nested tables, and large objects (LOBs) in an Oracle database.</p>
<p><a href="#CHDCJEBD">Table 4-0</a> illustrates the containment hierarchy for instances of all types in Oracle Objects for OLE.</p>
<div class="figure"><a id="CHDCJEBD" name="CHDCJEBD"></a><a id="OOFOL178" name="OOFOL178"></a>
<p class="titleinfigure">Figure 4-1 Object-Relational and LOB Data Types Diagram</p>
<img width="576" height="294" src="img/o4o00002.gif" alt="Object hierarchy starting with OraField and OraParameter" title="Object hierarchy starting with OraField and OraParameter" longdesc="img_text/o4o00002.htm" /><br />
<a id="sthref228" name="sthref228" href="img_text/o4o00002.htm">Description of "Figure 4-1 Object-Relational and LOB Data Types Diagram"</a><br />
<br /></div>
<!-- class="figure" -->
<p>Instances of these types can be fetched from the database or passed as input or output variables to SQL statements and PL/SQL blocks, including stored procedures and functions. All instances are mapped to COM Automation interfaces that provide methods for dynamic attribute access and manipulation. These interfaces can be obtained from:</p>
<ul>
<li>
<p>The <code>Value</code> property of an <code>OraField</code> object in a dynaset.</p>
</li>
<li>
<p>The <code>Value</code> property of an <code>OraParameter</code> object used as an input or an output parameter in SQL Statements or PL/SQL blocks.</p>
</li>
<li>
<p>An attribute of another object/<code>REF</code> instance.</p>
</li>
<li>
<p>An element in a collection (<code>VARRAY</code> or a nested table).</p>
</li>
</ul>
</div>
<!-- class="sect1" -->
<a id="BGBHIIHH" name="BGBHIIHH"></a><a id="OOFOL179" name="OOFOL179"></a>
<div class="sect1">
<h2 class="sect1">Instantiating Oracle LOBs, Objects, and Collections<a id="sthref229" name="sthref229"></a></h2>
<p>Oracle Objects for OLE provides COM Automation interfaces for working with LOBs, Oracle objects, and collection types. These interfaces provide methods and properties to access data associated with LOBs, Oracle objects, and collection instances.</p>
<a id="OOFOL180" name="OOFOL180"></a>
<div class="sect2"><a id="sthref230" name="sthref230"></a>
<h3 class="sect2">Oracle LOBs, Objects, and Collections<a id="sthref231" name="sthref231"></a><a id="sthref232" name="sthref232"></a><a id="sthref233" name="sthref233"></a></h3>
<p><a href="#BGBGCDHD">Table 4-1</a> lists Oracle LOBs, Objects, and collection types with associated OO4O interfaces.</p>
<div class="tblformal"><a id="OOFOL181" name="OOFOL181"></a><a id="sthref234" name="sthref234"></a><a id="BGBGCDHD" name="BGBGCDHD"></a>
<p class="titleintable">Table 4-1 Oracle LOBs, Objects, and Collections</p>
<table class="Formal" title="Oracle LOBs, Objects, and Collections" summary="rows list objects, lobs, and collections. column 1 lists type name and column 2 lists the OO4O interface" dir="ltr" border="1" width="100%" frame="hsides" rules="groups" cellpadding="3" cellspacing="0">
<col width="44%" />
<col width="*" />
<thead>
<tr align="left" valign="top">
<th align="left" valign="bottom" id="r1c1-t2">Type</th>
<th align="left" valign="bottom" id="r1c2-t2">OO4O Interface</th>
</tr>
</thead>
<tbody>
<tr align="left" valign="top">
<td align="left" id="r2c1-t2" headers="r1c1-t2">
<p><code>Object</code></p>
</td>
<td align="left" headers="r2c1-t2 r1c2-t2">
<p><code>OraObject</code></p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r3c1-t2" headers="r1c1-t2">
<p><code>REF</code></p>
</td>
<td align="left" headers="r3c1-t2 r1c2-t2">
<p><code>OraRef</code></p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r4c1-t2" headers="r1c1-t2">
<p><code>VARRAY</code> and Nested Table</p>
</td>
<td align="left" headers="r4c1-t2 r1c2-t2">
<p><code>OraCollection</code></p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r5c1-t2" headers="r1c1-t2">
<p><code>BLOB</code></p>
</td>
<td align="left" headers="r5c1-t2 r1c2-t2">
<p><code>OraBlob</code></p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r6c1-t2" headers="r1c1-t2">
<p><code>CLOB</code></p>
</td>
<td align="left" headers="r6c1-t2 r1c2-t2">
<p><code>OraClob</code></p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r7c1-t2" headers="r1c1-t2">
<p><code>BFILE</code></p>
</td>
<td align="left" headers="r7c1-t2 r1c2-t2">
<p><code>OraBFile</code></p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p>How the preceding interfaces are retrieved in OO4O depend on how they are stored in the database or accessed in a SQL statement. These are the possible scenarios:</p>
<ul>
<li>
<p>Column of a table</p>
<p>If a table contains LOBs, object types, and collections as columns and the dynaset <code>SELECT</code> statement is based on this table, then the <code>Value</code> property of the <code>OraField</code> object representing that column returns corresponding OO4O interfaces for that type.</p>
</li>
<li>
<p>Bind variable in a SQL statement or PL/SQL block</p>
<p>If a SQL statement or PL/SQL block has LOBs, object types, and collections as bind variables, then an <code>OraParameter</code> object should be created with a corresponding server type using the <code>Add</code> method. The <code>Value</code> property of the <code>OraParameter</code> object representing that bind variable returns the corresponding OO4O interfaces for that type.</p>
</li>
<li>
<p>Attribute of an Oracle object instance</p>
<p>If an Oracle object instance has LOBs, object types, or collections as attributes, then the corresponding OO4O interface for any attribute is retrieved by using the subscript or name of the attribute from the <code>OraObject</code> or <code>OraRef</code>, or by using the <code>Value</code> property of an <code>OraAttribute</code> object.</p>
</li>
<li>
<p>Element of <code>VARRAY</code> and nested table</p>
<p>If an Oracle <code>VARRAY</code> and nested table has object types and <code>REF</code> as its elements, then the corresponding OO4O interface is retrieved using the element index as the subscript from the <code>OraCollection</code> object.</p>
</li>
</ul>
<p>When OO4O interfaces for these types are retrieved as part of a dynaset, then the OO4O interfaces represent instances of LOBs, objects, and collection types for the <span class="italic">current row</span> of the dynaset. If the current row changes due to a move operation, then the OO4O interfaces represent instances of LOBs, objects, and collection types for the new current row. When OO4O interfaces for these types are retrieved as part of an <code>OraParameter</code> object and the <code>OraParameter</code> value changes to due to a <code>OraSQLStmt</code> <code>Refresh</code> method, then the OO4O interface represents a new instance LOB, object, and collection type for that <code>OraParameter</code>.</p>
<p>Internally, OO4O maintains one OO4O interface for each <code>OraField</code>, <code>OraParameter</code>, and <code>OraAttribute</code> object. To retain the instance of LOBs, objects, and collection types independent of a dynaset move operation or an <code>OraSQLStmt</code> refresh operation, use the <code>Clone</code> method on the corresponding OO4O interface. This method makes a copy of LOBs, objects, and collection types instance and returns a corresponding OO4O interface associated with that copy.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BGBCIACB" name="BGBCIACB"></a><a id="OOFOL182" name="OOFOL182"></a>
<div class="sect1">
<h2 class="sect1">Using Large Objects (LOBs)<a id="sthref235" name="sthref235"></a><a id="sthref236" name="sthref236"></a></h2>
<p>The large object (LOB) data types (<code>BLOB</code>, <code>CLOB</code>, <code>NCLOB</code>, and <code>BFILE</code>) can provide storage for large blocks of unstructured data, such as text, images, video clips, and sound waveforms, up to 4 gigabytes in size. They provide efficient, random, piece-wise access to the data. In Oracle Objects for OLE, instances of LOB data types are represented as interfaces.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="serobjch006.htm#BABHEIGC">OraBLOB, OraCLOB Objects</a></p>
</li>
<li>
<p><a href="serobjch005.htm#BABEIJFF">OraBFILE Object</a></p>
</li>
<li>
<p><a href="appendix.htm#BABJGBAG">"Schema Objects Used in LOB Data Type Examples"</a> for schema objects used in the OraLOB and <code>BFILE</code> examples</p>
</li>
</ul>
</div>
<p>This section includes the following topics:</p>
<ul>
<li>
<p><a href="#CHDJAJFH">LOB Data Types</a></p>
</li>
<li>
<p><a href="#BABEHAAF">Using OraBLOB and OraCLOB</a></p>
</li>
<li>
<p><a href="#CHDEFFGH">Retrieving LOBs From the Database</a></p>
</li>
<li>
<p><a href="#BGBBAFBC">Performance Considerations with LOB Read and Write</a></p>
</li>
<li>
<p><a href="#BGBIBGHA">Writing LOB Data</a></p>
</li>
<li>
<p><a href="#BGBJDAJG">Reading LOB Data</a></p>
</li>
</ul>
<a id="CHDJAJFH" name="CHDJAJFH"></a><a id="OOFOL183" name="OOFOL183"></a>
<div class="sect2">
<h3 class="sect2">LOB Data Types<a id="sthref237" name="sthref237"></a><a id="sthref238" name="sthref238"></a></h3>
<p><a href="#CHDGHJHC">Table 4-2</a> lists the four LOB data types and their corresponding OO4O interfaces.</p>
<div class="tblformal"><a id="OOFOL184" name="OOFOL184"></a><a id="sthref239" name="sthref239"></a><a id="CHDGHJHC" name="CHDGHJHC"></a>
<p class="titleintable">Table 4-2 LOB Data Types</p>
<table class="Formal" title="LOB Data Types" summary="rows list LOB datatypes. column one lists name and column two explains what the LOB is composed of." dir="ltr" border="1" width="100%" frame="hsides" rules="groups" cellpadding="3" cellspacing="0">
<col width="18%" />
<col width="*" />
<col width="26%" />
<thead>
<tr align="left" valign="top">
<th align="left" valign="bottom" id="r1c1-t4">LOB Data Types</th>
<th align="left" valign="bottom" id="r1c2-t4">a LOB whose value is composed of</th>
<th align="left" valign="bottom" id="r1c3-t4">Corresponding OO4O Interface</th>
</tr>
</thead>
<tbody>
<tr align="left" valign="top">
<td align="left" id="r2c1-t4" headers="r1c1-t4">
<p><code>BLOB</code></p>
</td>
<td align="left" headers="r2c1-t4 r1c2-t4">
<p>Unstructured binary (raw) data.</p>
</td>
<td align="left" headers="r2c1-t4 r1c3-t4">
<p><code>OraBLOB</code></p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r3c1-t4" headers="r1c1-t4">
<p><code>CLOB</code></p>
</td>
<td align="left" headers="r3c1-t4 r1c2-t4">
<p>Fixed-width, single-byte character data that corresponds to the database character set defined for Oracle Database.</p>
</td>
<td align="left" headers="r3c1-t4 r1c3-t4">
<p><code>OraCLOB</code></p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r4c1-t4" headers="r1c1-t4">
<p><code>NCLOB</code></p>
</td>
<td align="left" headers="r4c1-t4 r1c2-t4">
<p>Fixed-width, multiple-byte character data that corresponds to the national character set defined for Oracle Database.</p>
</td>
<td align="left" headers="r4c1-t4 r1c3-t4">
<p><code>OraCLOB</code></p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r5c1-t4" headers="r1c1-t4">
<p><code>BFILE</code></p>
</td>
<td align="left" headers="r5c1-t4 r1c2-t4">
<p>A LOB whose large binary data is stored in operating system files outside of database tablespaces. <code>BFILE</code>s can also be located on tertiary storage devices such as hard disks, CD-ROMs, Photo CDs, and DVDs.</p>
</td>
<td align="left" headers="r5c1-t4 r1c3-t4">
<p><code>OraBFILE</code></p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p>The following example creates a table that has <code>BLOB</code> and <code>CLOB</code> columns, and inserts rows into the table using the <code>ExecuteSQL</code> method on an <code>OraDatabase</code> object.</p>
<pre xml:space="preserve" class="oac_no_warn">Set OO4OSession = CreateObject("OracleInProcServer.XOraSession") 
 
Set InvDb = OO4OSession.OpenDatabase("<span class="italic">INVDB</span>", "scott/tiger", 0) 
InvDb.ExecuteSQL("create table part(part_id NUMBER, part_name 
VARCHAR2(20),part_image BLOB, part_desc CLOB)") 
InvDb.ExecuteSQL ("insert into part values (1,'ORACLE NETWORK',EMPTY_BLOB()," &amp; _
              "EMPTY_CLOB())") 
InvDb.ExecuteSQL ("insert into part values (2,'ORACLE SERVER', EMPTY_BLOB()," &amp; _
           "EMPTY_CLOB())") 
</pre>
<p>The <code>EMPTY_BLOB()</code> and <code>EMPTY_CLOB()</code> PL/SQL functions provide an empty LOB to insert into the LOB column.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="sermthod086.htm#CIHEEIEC">ExecuteSQL Method</a></div>
</div>
<!-- class="sect2" -->
<a id="BABEHAAF" name="BABEHAAF"></a><a id="OOFOL185" name="OOFOL185"></a>
<div class="sect2">
<h3 class="sect2">Using OraBLOB and OraCLOB<a id="sthref240" name="sthref240"></a><a id="sthref241" name="sthref241"></a></h3>
<p><code>OraBLOB</code> and <code>OraCLOB</code> interfaces in OO4O provide methods for performing operations on large objects in the database including <code>BLOB</code>, <code>CLOB</code>, and <code>NCLOB</code>, and <code>BFILE</code> data types.</p>
<p>The following Visual Basic example illustrates how to read the <code>PartImage</code> from the <code>part</code> table:</p>
<pre xml:space="preserve" class="oac_no_warn">Dim Buffer as Variant
Set Part = OraDatabase.CreateDynaset("select * from part", 0&amp;)
set PartImage = OraDynaset.Fields("part_image").Value
 
'read the data into the buffer
amount_read = PartImage.Read(buffer)
 
'copy the image content into the file
PartImage.CopyToFile "d:\image\partimage.jpg"
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="serobjch006.htm#BABHEIGC">OraBLOB, OraCLOB Objects</a></div>
</div>
<!-- class="sect2" -->
<a id="CHDEFFGH" name="CHDEFFGH"></a><a id="OOFOL186" name="OOFOL186"></a>
<div class="sect2">
<h3 class="sect2">Retrieving LOBs From the Database<a id="sthref242" name="sthref242"></a><a id="sthref243" name="sthref243"></a><a id="sthref244" name="sthref244"></a><a id="sthref245" name="sthref245"></a></h3>
<p><code>OraBlob</code>, <code>OraClob</code>, and <code>OraBFile</code> objects can be retrieved using an <code>OraDynaset</code> object or a parameter object:</p>
<a id="OOFOL187" name="OOFOL187"></a>
<div class="sect3"><a id="sthref246" name="sthref246"></a>
<h4 class="sect3">Using an OraDynaset Object</h4>
<p>If a table contains a LOB column and a dynaset query selects against that LOB column, then the <code>Value</code> property of the <code>OraField</code> object returns a <code>OraBlob</code>, <code>OraClob</code>, or a <code>OraBFile</code> object. The following example selects LOB columns from the <code>part</code> table. <code>PartDesc</code> and <code>PartImage</code> are <code>OraBlob</code> and <code>OraClob</code> objects that are retrieved from the <code>OraField</code> object.</p>
<pre xml:space="preserve" class="oac_no_warn">Set OO4OSession = CreateObject("OracleInProcServer.XOraSession") 
Set InvDb = OO4OSession.OpenDatabase("<span class="italic">INVDB</span>", "scott/tiger", 0) 
Set Part = InvDb.CreateDynaset("select * from part", 0&amp;) 
Set PartDesc = Part.Fields("part_desc").Value 
Set PartImage = Part.Fields("part_image").Value 
</pre></div>
<!-- class="sect3" -->
<a id="OOFOL188" name="OOFOL188"></a>
<div class="sect3"><a id="sthref247" name="sthref247"></a>
<h4 class="sect3">Using a Parameter object</h4>
<p>If a SQL statement or PL/SQL block has a bind variable of type LOB, you create a <code>OraParameter</code> object using the <code>OraParameters</code> <code>Add</code> method. The <code>Value</code> property of the <code>OraParameter</code> object for that bind variable returns an <code>OraBlob</code>, <code>OraClob</code>, or <code>OraBFile</code> object.</p>
<p>The following example illustrates how to use a LOB data type as a bind variable in a PL/SQL anonymous block. This block selects a LOB column from the database.</p>
<pre xml:space="preserve" class="oac_no_warn">Set OO4OSession = CreateObject("OracleInProcServer.XOraSession") 
Set InvDb = OO4OSession.OpenDatabase("<span class="italic">INVDB</span>", "scott/tiger", 0) 
InvDb.Parameters.Add "PartDesc", Null, ORAPARM_OUTPUT,ORATYPE_CLOB 
InvDb.Parameters.Add "PartImage", Null, ORAPARM_OUTPUT,ORATYPE_BLOB 
InvDb.ExecuteSQL ("BEGIN select part_desc, part_image into :PARTDESC," &amp; _
             ":PARTIMAGE from part where part_id = 1 for update NOWAIT; END;") &amp; _
             "for update NOWAIT; END;") 
Set PartDesc = InvDb.Parameters("PartDesc").Value 
Set PartImage = InvDb.Parameters("PartImage").Value 
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BGBBAFBC" name="BGBBAFBC"></a><a id="OOFOL189" name="OOFOL189"></a>
<div class="sect2">
<h3 class="sect2">Performance Considerations with LOB Read and Write<a id="sthref248" name="sthref248"></a><a id="sthref249" name="sthref249"></a><a id="sthref250" name="sthref250"></a><a id="sthref251" name="sthref251"></a><a id="sthref252" name="sthref252"></a><a id="sthref253" name="sthref253"></a><a id="sthref254" name="sthref254"></a></h3>
<p>When reading and writing LOBs, there are several options that can optimize an application's memory usage and reduce the number of network round-trips.</p>
<a id="OOFOL190" name="OOFOL190"></a>
<div class="sect3"><a id="sthref255" name="sthref255"></a>
<h4 class="sect3">Single-Piece Operation</h4>
<p>The contents of a buffer are read or written to the database in one round-trip.</p>
</div>
<!-- class="sect3" -->
<a id="OOFOL191" name="OOFOL191"></a>
<div class="sect3"><a id="sthref256" name="sthref256"></a>
<h4 class="sect3">Multiple-Piece Operation</h4>
<p>A small buffer is used for multiple calls to read or write methods. In this mode, the data is streamed, rather than requiring a complete round-trip for each read or write call. This method is quicker than doing several small single-piece operations. It has the restriction that the data must be read and written sequentially, meaning that the offset increases automatically with each read or write. The total amount must be known before it is written, and the operation cannot be aborted before completion.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="serobjch006.htm#BABHEIGC">OraBLOB, OraCLOB Objects</a></p>
</li>
<li>
<p><a href="sermthod146.htm#CIHDFFEH">Read (OraLOB/BFILE) Method</a></p>
</li>
<li>
<p><a href="sermthod176.htm#CIHIGAJA">Write (OraLOB) Method</a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect3" -->
<a id="OOFOL192" name="OOFOL192"></a>
<div class="sect3"><a id="sthref257" name="sthref257"></a>
<h4 class="sect3">LOB Buffering Option</h4>
<p>The LOB buffering option automatically buffers any read or write operations. A network round-trip occurs only when the <code>FlushBuffer</code> method is called. This is most useful when there are many small writes that occur all across the LOB. This method has significant restrictions.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="sermthod083.htm#BHBCBEGA">EnableBuffering (OraLOB) Method</a></div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BGBIBGHA" name="BGBIBGHA"></a><a id="OOFOL193" name="OOFOL193"></a>
<div class="sect2">
<h3 class="sect2">Writing LOB Data<a id="sthref258" name="sthref258"></a><a id="sthref259" name="sthref259"></a><a id="sthref260" name="sthref260"></a><a id="sthref261" name="sthref261"></a></h3>
<p>The <code>Write</code> method of the <code>OraBlob</code> and <code>OraClob</code> objects writes data from a local buffer to a LOB in the database. The <code>CopyFromFile</code> (OraLOB) method writes content of a local file to a LOB in the database.</p>
<p>Any operation that changes the value of a LOB, including the <code>Write</code> method, can only occur when the row the LOB is associated with has been locked. If a LOB field is null, it must first be updated with an empty LOB before a method can write to the LOB field.</p>
<p>LOB data can be written in one piece or in a series of multiple pieces., as described in the following topics:</p>
<ul>
<li>
<p><a href="#BGBIAACE">Single-Piece Write Operation</a></p>
</li>
<li>
<p><a href="#BGBJFAJE">Multiple-Piece Write Operation</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="sermthod176.htm#CIHIGAJA">Write (OraLOB) Method</a></p>
</li>
<li>
<p><a href="sermthod047.htm#CIHJGCJC">CopyFromFile (OraLOB) Method</a></p>
</li>
</ul>
</div>
<a id="BGBIAACE" name="BGBIAACE"></a><a id="OOFOL194" name="OOFOL194"></a>
<div class="sect3">
<h4 class="sect3">Single-Piece Write Operation</h4>
<p>The entire contents of a buffer can be written in a single piece in one network round-trip. The following example writes 10 KB of data from the local file <code>partimage.dat</code> to <code>part_image</code> column at the offset of <code>1000</code>.</p>
<pre xml:space="preserve" class="oac_no_warn">Dim buffer() as byte 
ReDim buffer(10000) 
Set OO4OSession = CreateObject("OracleInProcServer.XOraSession") 
Set InvDb = OO4OSession.OpenDatabase("<span class="italic">INVDB</span>", "scott/tiger", 0) 
Set Part = InvDb.CreateDynaset("select * from part", 0&amp;) 
Set PartImage = Part.Fields("part_image").Value 
PartImage.Offset = 1000 
FNum = FreeFile 
Open "PartImage.Dat" For Binary As #FNum 
Get #FNum, , buffer 
Part.Edit 
 
amount_written = PartImage.Write(buffer) 
Part.Update 
Close FNum 
</pre>
<p>The <code>CopyFromFile</code> (OraLOB) method writes data directly to a LOB from a local file. The following code is functionally the same as the previous code:</p>
<pre xml:space="preserve" class="oac_no_warn">Part.Edit 
PartImage.CopyFromFile "PartImage.dat" , 10000, 1000 
Part.Update 
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="sermthod047.htm#CIHJGCJC">CopyFromFile (OraLOB) Method</a></div>
</div>
<!-- class="sect3" -->
<a id="BGBJFAJE" name="BGBJFAJE"></a><a id="OOFOL195" name="OOFOL195"></a>
<div class="sect3">
<h4 class="sect3">Multiple-Piece Write Operation</h4>
<p>This mechanism is used when the size of the buffer available is smaller than the total amount of data to be written. The total amount of data to be written is set by using the <code>PollingAmount</code> (OraLOB/<code>BFILE</code>) property.</p>
<p>The <code>Offset</code> (OraLOB/<code>BFILE</code>) property is used only once to set the offset for the first piece <code>Write</code> operation. After the first time, it is automatically increased by the size of the previous piece. The <code>Status</code> (OraLOB/<code>BFILE</code>) property must be checked for success of each piece <code>Write</code> operation. If the <code>Status</code> property returns <code>ORALOB_NEED_DATA</code>, the <code>Write</code> method must be called again. This must continue until the amount specified by the <code>PollingAmount</code> property has been sent.</p>
<p>The <code>piecetype</code> argument of the <code>Write</code> method must be set to <code>ORALOB_FIRST_PIECE</code> for the first piece that is sent, and last piece <code>Write</code> operation ends with setting the <code>piecetype</code> argument to <code>ORALOB_LAST_PIECE</code>. At the end of multiple piece operation, the <code>Status</code> property returns <code>ORALOB_NO_DATA</code>.</p>
<p>The following example writes 102 KB of data in 10 KB chunks to the <code>part_image</code> column from the local file <code>partimage.dat</code> at offset of <code>1000</code>.</p>
<pre xml:space="preserve" class="oac_no_warn">Dim buffer() as byte 
chunksize = 10000 
ReDim buffer(chunksize) 
Set OO4OSession = CreateObject("OracleInProcServer.XOraSession") 
Set InvDb = OO4OSession.OpenDatabase("<span class="italic">INVDB</span>", "scott/tiger", 0) 
Set Part = InvDb.CreateDynaset("select * from part", 0&amp;) 
Set PartImage = Part.Fields("part_image").Value 
 
FNum = FreeFile 
Open "PartImage.Dat" For Binary As #FNum 
PartImage.Offset = 1000 
PartImage.PollingAmount =102000 
remainder = 102000 
Part.Edit 
Get #FNum, , buffer 
amount_written = PartImage.Write(buffer, chunksize, ORALOB_FIRST_PIECE) 
 
While PartImage.Status = ORALOB_NEED_DATA 
remainder = remainder - chunksize 
If remainder &lt; chunksize Then 
piecetype = ORALOB_LAST_PIECE 
chunksize = remainder 
 
Else 
piecetype = ORALOB_NEXT_PIECE 
End If 
Get #FNum, , buffer 
amount_written = PartImage.Write(buffer, chunksize, piecetype) 
Wend 
Close FNum 
Part.Update 
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="serprop104.htm#CHDFIBDJ">PollingAmount Property</a></p>
</li>
<li>
<p><a href="serprop093.htm#CEGFGAAJ">Offset (OraLOB/BFILE) Property</a></p>
</li>
<li>
<p><a href="serprop125.htm#CEGCGCEC">Status (OraLOB/BFILE) Property</a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BGBJDAJG" name="BGBJDAJG"></a><a id="OOFOL196" name="OOFOL196"></a>
<div class="sect2">
<h3 class="sect2">Reading LOB Data<a id="sthref262" name="sthref262"></a><a id="sthref263" name="sthref263"></a><a id="sthref264" name="sthref264"></a><a id="sthref265" name="sthref265"></a><a id="sthref266" name="sthref266"></a></h3>
<p>The <code>OraBlob</code> and <code>OraClob</code> <code>Read</code> method reads data to a local buffer from a LOB in the database. The <code>CopyFromFile</code> method reads the contents of a LOB into a local file.</p>
<p>LOB data can be read in one piece or in a series of multiple pieces, as described in the following topics:</p>
<ul>
<li>
<p><a href="#BGBGFAGI">Single-Piece Read Operation</a></p>
</li>
<li>
<p><a href="#BGBBHIFA">Multiple-Piece Read Operation</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="sermthod146.htm#CIHDFFEH">Read (OraLOB/BFILE) Method</a></div>
<a id="BGBGFAGI" name="BGBGFAGI"></a><a id="OOFOL197" name="OOFOL197"></a>
<div class="sect3">
<h4 class="sect3">Single-Piece Read Operation</h4>
<p>The entire contents of a buffer can be read in a single piece in one network round-trip. The following example reads 10 KB of data from the <code>part_image</code> column at an offset of <code>1000</code> to the local file <code>image.dat</code>.</p>
<pre xml:space="preserve" class="oac_no_warn">Dim buffer as Variant 
Dim buf() As Byte 
chunksize = 10000 
Set OO4OSession = CreateObject("OracleInProcServer.XOraSession") 
Set InvDb = OO4OSession.OpenDatabase("<span class="italic">INVDB</span>", "scott/tiger", 0) 
Set Part = InvDb.CreateDynaset("select * from part", 0&amp;) 
Set PartImage = Part.Fields("part_image").Value 
FNum = FreeFile 
Open "image.dat" For Binary As #FNum 
PartImage.Offset = 1000 
amount_read = PartImage.Read(buffer,10000) 
buf = buffer 
Put #FNum, , buf 
Close FNum 
</pre>
<p>The <code>CopyToFile</code> (OraLOB/<code>BFILE</code>) method writes data directly to a local file from a LOB. The following code is functionally the same as the previous code:</p>
<pre xml:space="preserve" class="oac_no_warn">PartImage.CopyToFile "image.dat" , 10000, 1000 
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="sermthod049.htm#CIHHBCHF">CopyToFile (OraLOB/BFILE) Method</a></div>
</div>
<!-- class="sect3" -->
<a id="BGBBHIFA" name="BGBBHIFA"></a><a id="OOFOL198" name="OOFOL198"></a>
<div class="sect3">
<h4 class="sect3">Multiple-Piece Read Operation</h4>
<p>This mechanism is used when the size of the buffer available is smaller than the total amount of data to be read. The total amount of data to be read is set by using the <code>PollingAmount</code> (OraLOB/<code>BFILE</code>) property. The <code>Offset</code> (OraLOB/<code>BFILE</code>) property is used only once to set the offset for the first piece <code>Read</code> operation. After the first time, it is automatically increased by the size of the previous piece.</p>
<p>The <code>Status</code> (OraLOB/<code>BFILE</code>) property must be checked for success for each piece <code>Read</code> operation. If the <code>Status</code> property returns <code>ORALOB_NEED_DATA</code>, the <code>Read</code> method must be called again. This must continue until the amount specified by the <code>PollingAmount</code> property has been read. At the end of multiple piece operations, the <code>Status</code> property returns <code>ORALOB_NO_DATA</code>.</p>
<p>The following example reads 102 KB of data in 10 KB chunks from the <code>part_image</code> column at offset of <code>1000</code> to the local file <code>image.dat</code>.</p>
<pre xml:space="preserve" class="oac_no_warn">Dim buffer as Variant 
Dim buf() As Byte 
Set OO4OSession = CreateObject("OracleInProcServer.XOraSession") 
Set InvDb = OO4OSession.OpenDatabase("<span class="italic">INVDB</span>", "scott/tiger", 0) 
Set Part = InvDb.CreateDynaset("select * from part", 0&amp;) 
Set PartImage = Part.Fields("part_image").Value 
FNum = FreeFile 
Open "image.dat" For Binary As #FNum 
PartImage.offset = 1000 
PartImage.PollingAmount = 102000 
amount_read = PartImage.Read(buffer, chunksize) 
buf = buffer 
Put #FNum, , buf 
While PartImage.Status = ORALOB_NEED_DATA 
amount_read = PartImage.Read(buffer, chunksize) 
buf = buffer 
Put #FNum, , buf 
Wend 
Close FNum 
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="serprop104.htm#CHDFIBDJ">PollingAmount Property</a></p>
</li>
<li>
<p><a href="serprop093.htm#CEGFGAAJ">Offset (OraLOB/BFILE) Property</a></p>
</li>
<li>
<p><a href="serprop125.htm#CEGCGCEC">Status (OraLOB/BFILE) Property</a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BGBIFHEA" name="BGBIFHEA"></a><a id="OOFOL199" name="OOFOL199"></a>
<div class="sect1">
<h2 class="sect1">Oracle Object Data Types<a id="sthref267" name="sthref267"></a><a id="sthref268" name="sthref268"></a><a id="sthref269" name="sthref269"></a><a id="sthref270" name="sthref270"></a></h2>
<p>An object type is a user-defined composite data type created in the database. A column can represent an object type or a row can represent an object type. An instance of the <code>Object</code> type can be stored in the database. This object instance can be fetched to the client side and modified using Oracle Objects for OLE.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADOBJ" href="http://www.oracle.com/pls/db102/lookup?id=ADOBJ"><span class="italic">Oracle Database Object-Relational Developer's Guide</span></a></div>
<p>There are two types of object instances.</p>
<ul>
<li>
<p><code>OraObject</code> object</p>
<p>If a column represents an object type, then an instance of this object type is referred to as an embedded instance or a value instance. In OO4O, this type is represented by an <code>OraObject</code> object. For example, an <code>ADDRESS</code> object type is stored as a column in the <code>PERSON</code> table. <code>OraObject</code> objects can be embedded within other structures. An embedded instance or a value instance can also be the attributes of another object instance.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CHDFAGCF">"About the OraObject Interface"</a></div>
</li>
<li>
<p><code>OraRef</code> object</p>
<p>If a row in an object table represents an object type, then the instance of this type is referred to as a referenceable object. In OO4O, this type is represented by an <code>OraRef</code> object. An internally referenceable object has a unique object identifier that is represented by the <code>REF</code> data type. A <code>REF</code> column can be thought of as a pointer to a referenceable object. OO4O applications can retrieve a <code>REF</code> data type from a referenceable object, fetch (pin) the associated referenceable object to the client side, and update (flush) the modified referenceable object to the database.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CHDIFDJE">"About the OraRef Interface"</a></div>
</li>
</ul>
<a id="CHDFAGCF" name="CHDFAGCF"></a><a id="OOFOL200" name="OOFOL200"></a>
<div class="sect2">
<h3 class="sect2">About the OraObject Interface<a id="sthref271" name="sthref271"></a><a id="sthref272" name="sthref272"></a></h3>
<p>The <code>OraObject</code> interface is a representation of an Oracle embedded object or a value instance. It contains a collection interface (<code>OraAttributes</code>) for accessing and manipulating (updating and inserting) individual attributes of a value instance.</p>
<p>Individual attributes of an <code>OraAttributes</code> collection interface can be accessed by using a subscript or the name of the attribute.</p>
<p>The following Visual Basic example illustrates how to access attributes of the <code>Address</code> object in the <code>person_tab</code> table:</p>
<pre xml:space="preserve" class="oac_no_warn">Set Person = OraDatabase.CreateDynaset("select * from person_tab",0&amp;) 
set Address = Person.Fields("Addr").Value 
msgbox Address.Zip 
msgbox.Address.City 
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="serobjch018.htm#BABEFFEJ">OraObject Object</a></div>
</div>
<!-- class="sect2" -->
<a id="BGBGHFCJ" name="BGBGHFCJ"></a><a id="OOFOL201" name="OOFOL201"></a>
<div class="sect2">
<h3 class="sect2">Using the OraObject Interface<a id="sthref273" name="sthref273"></a><a id="sthref274" name="sthref274"></a><a id="sthref275" name="sthref275"></a><a id="sthref276" name="sthref276"></a></h3>
<p>The following example creates an <code>ADDRESS</code> object type having street, city, state and zip as its attributes and a <code>PERSON</code> table having an <code>ADDRESS</code> object type column. It also inserts data using the <code>ExecuteSQL</code> method of the <code>OraDatabase</code> object.</p>
<pre xml:space="preserve" class="oac_no_warn">set OO4OSession = CreateObject("OracleInProcServer.XOraSession") 
set hrDb = OO4OSession.OpenDatabase("<span class="italic">ExampleDb</span>", "scott/tiger", 0) 
HRDb.ExecuteSQL("create type ADDRESS as object ( street 
VARCHAR2(200), city varchar2(20), state CHAR(2), zip varchar2(10) )")  
HRDb.ExecuteSQL("create table person (name varchar2(20), age number," &amp; _ 
                 "addr ADDRESS) ") 
HRDb.ExecuteSQL("insert into person values('nasser',40, " &amp; _
                 "address('Wine Blvd', 'Pleasanton', 'CA', '94065'))") 
HRDb.ExecuteSQL("insert into person values('Maha', 25," &amp; _ 
                 "address('Continental Way', 'Belmont', 'CA', '94002'))")
HRDb.ExecuteSQL("insert into person values('chris',30, address('First " &amp; _
                 "Street', 'San Francisco', 'CA' ,'94123'))") 
</pre>
<p>The following topics discuss manipulating the <code>OraObject</code> interface:</p>
<ul>
<li>
<p><a href="#BGBCCJIC">Retrieving an Embedded/Value Instance from the Database</a></p>
</li>
<li>
<p><a href="#BGBGJJFE">Accessing Attributes of an Embedded/Value Instance</a></p>
</li>
<li>
<p><a href="#BGBHBEJJ">Modifying Attributes of an Embedded/Value Instance</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="sermthod086.htm#CIHEEIEC">ExecuteSQL Method</a></div>
<a id="BGBCCJIC" name="BGBCCJIC"></a><a id="OOFOL202" name="OOFOL202"></a>
<div class="sect3">
<h4 class="sect3">Retrieving an Embedded/Value Instance from the Database</h4>
<p>An <code>OraObject</code> object can be retrieved using OO4O using a dynaset or parameter object:</p>
<a id="OOFOL203" name="OOFOL203"></a>
<div class="sect4"><a id="sthref277" name="sthref277"></a>
<h5 class="sect4">Using a Dynaset Object<a id="sthref278" name="sthref278"></a><a id="sthref279" name="sthref279"></a></h5>
<p>If a table contains an object type column and a dynaset query selects against that column, then the <code>Value</code> property of the <code>OraField</code> object returns an <code>OraObject</code>.</p>
<p>The following code selects an <code>ADDRESS</code> column from the <code>person</code> table, and then an <code>Address</code> object is retrieved from the <code>OraField</code> object.</p>
<pre xml:space="preserve" class="oac_no_warn">set OO4OSession = CreateObject("OracleInProcServer.XOraSession") 
set hrDb = OO4OSession.OpenDatabase("<span class="italic">ExampleDb</span>", "scott/tiger", 0) 
set Person = hrDb.CreateDynaset("select * from person", 0&amp;) 
set Address = Person.Fields("Addr").Value 
</pre></div>
<!-- class="sect4" -->
<a id="OOFOL204" name="OOFOL204"></a>
<div class="sect4"><a id="sthref280" name="sthref280"></a>
<h5 class="sect4">Using a Parameter Object<a id="sthref281" name="sthref281"></a><a id="sthref282" name="sthref282"></a></h5>
<p>If a SQL statement or a PL/SQL block has a bind variable of object type, you create an <code>OraParameter</code> object using the <code>OraParameters</code> <code>Add</code> method. The <code>Value</code> property of the <code>OraParameter</code> object for that bind variable returns an <code>OraObject</code> object.</p>
<p>The following example uses an object data type as a bind variable in a PL/SQL anonymous block. This block selects an object column from the database.</p>
<pre xml:space="preserve" class="oac_no_warn">set OO4OSession = CreateObject("OracleInProcServer.XOraSession") 
set hrDb = OO4OSession.OpenDatabase("<span class="italic">ExampleDb</span>", "scott/tiger", 0) 
hrDb.Parameters.Add "ADDRESS", Null, ORAPARM_OUTPUT, ORATYPE_OBJECT, "ADDRESS"
'execute the sql statement which selects Address from the person_tab 
hrDb.ExecuteSQL ("BEGIN select Addr into :ADDRESS from person where " &amp; _
            "age = 40; end;") 
'retrieve Address object from the OraParameter 
set address = hrDb.Parameters("ADDRESS").Value 
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="serobjch018.htm#BABEFFEJ">OraObject Object</a></p>
</li>
<li>
<p><a href="serobjch012.htm#BABHHJGE">OraField Object</a></p>
</li>
<li>
<p><a href="serobjch020.htm#BABDIJAH">OraParameter Object</a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect4" --></div>
<!-- class="sect3" -->
<a id="BGBGJJFE" name="BGBGJJFE"></a><a id="OOFOL205" name="OOFOL205"></a>
<div class="sect3">
<h4 class="sect3">Accessing Attributes of an Embedded/Value Instance<a id="sthref283" name="sthref283"></a><a id="sthref284" name="sthref284"></a></h4>
<p>Individual attributes can be accessed by using a subscript or the name of the attribute. The following example illustrates how to access attribute values of an <code>ADDRESS</code> object instance.</p>
<pre xml:space="preserve" class="oac_no_warn">set OO4OSession = CreateObject("OracleInProcServer.XOraSession") 
set hrDb = OO4OSession.OpenDatabase("<span class="italic">ExampleDb</span>", "scott/tiger", 0) 
set Person = hrDb.CreateDynaset("select * from person", 0&amp;) 
set Address = Person.Fields("Addr").Value 
msgbox Address.City 
msgbox Address.Street 
msgbox Address.State 
msgbox Address.Zip 
</pre>
<p>The following code accesses all of the attribute values:</p>
<pre xml:space="preserve" class="oac_no_warn">For I=1 to Address.Count 
   msgbox Address(I) 
Next I 
</pre></div>
<!-- class="sect3" -->
<a id="BGBHBEJJ" name="BGBHBEJJ"></a><a id="OOFOL206" name="OOFOL206"></a>
<div class="sect3">
<h4 class="sect3">Modifying Attributes of an Embedded/Value Instance<a id="sthref285" name="sthref285"></a><a id="sthref286" name="sthref286"></a></h4>
<p>If the object instance is retrieved using a dynaset object, its attribute values can be modified between a dynaset <code>Edit</code>/<code>Update</code> pair. The following example modifies the street and city attribute values of the <code>ADDRESS</code> object instance.</p>
<pre xml:space="preserve" class="oac_no_warn">set OO4OSession = CreateObject("OracleInProcServer.XOraSession")
set hrDb = OO4OSession.OpenDatabase("<span class="italic">ExampleDb</span>", "scott/tiger", 0)
set Person = hrDb.CreateDynaset("select * from person", 0&amp;)
set Address = Person.Fields("Addr").Value
Person.Edit
      Address.Street  =  "Oracle Parkway"
      Address.City = "Redwood shores"
Person.Update
</pre></div>
<!-- class="sect3" -->
<a id="BABHIJBF" name="BABHIJBF"></a><a id="OOFOL207" name="OOFOL207"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Executing a Member Method of an Oracle Object Instance <a id="sthref287" name="sthref287"></a><a id="sthref288" name="sthref288"></a></h4>
<p>Oracle object type member methods are created during type creation. Oracle object instance member methods are executed in OO4O as PL/SQL procedures or functions. Arguments and return values to the member methods should be bound using the <code>OraParameter</code> object. The first argument to the member method should always be the object instance. This object instance can be bound with the <code>ORAPARM_INPUT</code> or <code>ORAPARM_BOTH</code> mode. If the member method modifies the attributes of an object instance and a new object instance needs to be retrieved to the OO4O application, then this object instance must be bound with the <code>ORAPARM_BOTH</code> mode.</p>
<p>For example, if a <code>bank_account</code> object type has <code>open</code>, <code>close</code>, and <code>deposit</code> as member methods, then the schema for the <code>bank_account</code> object type is the following:</p>
<pre xml:space="preserve" class="oac_no_warn">CREATE OR REPLACE TYPE bank_account AS OBJECT ( 
    acct_number INTEGER(5), 
    balance REAL, 
    MEMBER PROCEDURE open (amount IN REAL), 
    MEMBER PROCEDURE close (num IN INTEGER, amount OUT REAL), 
    MEMBER PROCEDURE deposit (SELF IN OUT bank_bccount,num IN 
                        INTEGER, amount IN REAL), 
); 
</pre>
<p>In OO4O, <code>BankObj</code> is an <code>OraObject</code> object representing a valid bank object instance from the database. To execute the deposit method, the <code>SELF</code>, <code>num</code>, and <code>amount</code> arguments need to be bound using the <code>OraParameter</code> object.</p>
<pre xml:space="preserve" class="oac_no_warn">Dim BankObj as OraObject 
assumes that we have valid BankObj 
set BankObj = ..... 
 
'create a OraParameter object for bank_account object and set it to BankObj 
OraDatabase.Parameters.Add "BANK", BankObj, ORAPARM_BOTH, ORATYPE_OBJECT, _
                     "BANK_ACCOUNT" 
 
'create a OraParameter object for num argument and set the value to 100 
OraDatabase.Parameters.Add "ACCOUNT_NO", 100, ORAPARM_INPUT, ORATYPE_NUMBER 
 
'create a OraParameter object for amount argument and set the value to 1200 
OraDatabase.Parameters.Add "AMOUNT", 1200, ORAPARM_OUTPUT, ORATYPE_NUMBER
 
'display the balance from the bank object 
Bankobj.balance 
 
'now execute the PL/SQL block for member method execution 
OraDatabase.ExecuteSQL ("BEGIN BANK_ACCOUNT.DEPOSIT :BANK," &amp; _ 
                    (":ACCOUNT_NO,:AMOUNT); END;") 
 
'get the modified bank object from the parameter 
set Bankobj  = OraDatabase.Parameters("BANK").Value 
 
'display the new balance 
Bankobj.balance 
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CHDIFDJE" name="CHDIFDJE"></a><a id="OOFOL208" name="OOFOL208"></a>
<div class="sect2">
<h3 class="sect2">About the OraRef Interface<a id="sthref289" name="sthref289"></a><a id="sthref290" name="sthref290"></a><a id="sthref291" name="sthref291"></a></h3>
<p>The <code>OraRef</code> interface represents an instance of a referenceable object (<code>REF</code>) in client applications. The object attributes are accessed in the same manner as attributes of an object represented by the <code>OraObject</code> interface. The <code>OraRef</code> interface is derived from an <code>OraObject</code> interface through the containment mechanism in COM. <code>REF</code> objects are updated and deleted independently of the context from which they originated, such as dynasets. The <code>OraRef</code> interface also encapsulates the functionality for navigating through graphs of objects utilizing the Complex Object Retrieval Capability (COR) in Oracle Call Interface (OCI).</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="serobjch021.htm#BABJHICF">"OraRef Object"</a></div>
</div>
<!-- class="sect2" -->
<a id="BGBDECAH" name="BGBDECAH"></a><a id="OOFOL209" name="OOFOL209"></a>
<div class="sect2">
<h3 class="sect2">Using the OraRef Interface<a id="sthref292" name="sthref292"></a><a id="sthref293" name="sthref293"></a></h3>
<p>This section demonstrates the creation of an object table named <code>PERSON_TAB</code>. The object table is based on the object type <code>PERSONOBJ</code>. Each reference to the rows of this object table is stored in an <code>aperson</code> <code>REF</code> type column of the <code>CUSTOMERS</code> table. The following code creates database schemas:</p>
<pre xml:space="preserve" class="oac_no_warn">set OO4OSession = CreateObject("OracleInProcServer.XOraSession") 
set hrDb = OO4OSession.OpenDatabase("<span class="italic">ExampleDb</span>", "scott/tiger", 0) 
HRDb.ExecuteSQL("create type PERSONOBJ  as object ( name varchar2(20), " &amp; _
                 "age number, addr ADDRESS)")
HRDb.ExecuteSQL("create table person_tab of personobj") 
HRDb.ExecuteSQL("insert into person_tab values('nasser',40," &amp; _ 
                  "address('Wine Blvd', 'Pleasanton', 'CA', '94065'))") 
HRDb.ExecuteSQL("insert into person_tab values('Maha', 25, " &amp; _
                  "address('Continental Way', 'Belmont', 'CA', '94002'))") 
HRDb.ExecuteSQL("insert into person_tab values('chris',30, " &amp; _
               "address('First Street', 'San Francisco', 'CA' , '94123'))") 
</pre>
<p>The following code creates a <code>CUSTOMERS</code> table having an <code>aperson</code> <code>REF</code> column referencing rows of the object table:</p>
<pre xml:space="preserve" class="oac_no_warn">HRDb.ExecuteSQL("create table CUSTOMERS (account number, 
aperson REF personobj)") 
 
HRDb.ExecuteSQL("insert into customers values(10, null)") 
HRDb.ExecuteSQL("insert into customers values(20, null)") 
HRDb.ExecuteSQL("insert into customers values(30, null)") 
HRDb.ExecuteSQL("update customers set aperson = (select ref(p) from " &amp; _
                 "person_tab p where p.name = 'nasser') where account = 10") 
HRDb.ExecuteSQL("update customers set aperson = (select ref(p) from " &amp; _
                 "person_tab p where p.name = 'Maha') where account = 20") 
HRDb.ExecuteSQL("update customers set aperson = (select ref(p) from " &amp; _
                 "person_tab p where p.name = 'chris') where account = 30") 
</pre>
<p>The following topics discuss manipulating the <code>OraRef</code> Interface:</p>
<ul>
<li>
<p><a href="#BGBDGDBA">Retrieving a REF from the Database</a></p>
</li>
<li>
<p><a href="#BGBEDFEF">Accessing Attributes of a Referenceable Instance</a></p>
</li>
<li>
<p><a href="#BGBEEBCF">Modifying Attributes of a Referenceable Instance</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="serobjch021.htm#BABJHICF">OraRef Object</a></div>
<a id="BGBDGDBA" name="BGBDGDBA"></a><a id="OOFOL210" name="OOFOL210"></a>
<div class="sect3">
<h4 class="sect3">Retrieving a REF from the Database<a id="sthref294" name="sthref294"></a><a id="sthref295" name="sthref295"></a></h4>
<p>An <code>OraRef</code> object can be retrieved using OO4O in the following ways:</p>
<a id="OOFOL211" name="OOFOL211"></a>
<div class="sect4"><a id="sthref296" name="sthref296"></a>
<h5 class="sect4">Using a Dynaset Object<a id="sthref297" name="sthref297"></a><a id="sthref298" name="sthref298"></a></h5>
<p>If a table contains a <code>REF</code> type column and a dynaset query selects against that column, then the <code>Value</code> property of the <code>OraField</code> object returns an <code>OraREF</code>. The following example selects an <code>aperson</code> column from the <code>person</code> table, and the <code>aperson</code> object is retrieved from the <code>OraField</code> object.</p>
<pre xml:space="preserve" class="oac_no_warn">set OO4OSession = CreateObject("OracleInProcServer.XOraSession") 
set hrDb = OO4OSession.OpenDatabase("<span class="italic">ExampleDb</span>", "scott/tiger", 0) 
set Customer = hrDb.CreateDynaset("select * from customers", 0&amp;) 
set Person = Customer.Fields("aperson").Value 
</pre></div>
<!-- class="sect4" -->
<a id="OOFOL212" name="OOFOL212"></a>
<div class="sect4"><a id="sthref299" name="sthref299"></a>
<h5 class="sect4">Using an OraParameter Object<a id="sthref300" name="sthref300"></a><a id="sthref301" name="sthref301"></a></h5>
<p>If a SQL statement or PL/SQL block has a bind variable of <code>REF</code> type, you create an <code>OraParameter</code> object using the <code>OraParameters</code> <code>Add</code> method. The <code>Value</code> property of the <code>OraParameter</code> object for that bind variable returns an <code>OraREF</code>.</p>
<p>The example illustrates using a <code>REF</code> object data type as a bind variable in a PL/SQL anonymous block. The block selects an object column from the database.</p>
<pre xml:space="preserve" class="oac_no_warn">set OO4OSession = CreateObject("OracleInProcServer.XOraSession") 
set hrDb = OO4OSession.OpenDatabase("<span class="italic">ExampleDb</span>", "scott/tiger", 0) 
hrDb.Parameters.Add "PERSON", Null, ORAPARM_OUTPUT, ORATYPE_REF,"PERSONOBJ"
 
'execute the sql statement which selects Address from the person_tab 
hrDb.ExecuteSQL ("BEGIN select aperson into :PERSON from customers" &amp; _ 
                "where account = 10; end;") 
 
'retrieve Person object from the OraParameter 
set Person = hrDb.Parameters("PERSON").Value 
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="serobjch021.htm#BABJHICF">OraRef Object</a></div>
</div>
<!-- class="sect4" --></div>
<!-- class="sect3" -->
<a id="BGBEDFEF" name="BGBEDFEF"></a><a id="OOFOL213" name="OOFOL213"></a>
<div class="sect3">
<h4 class="sect3">Accessing Attributes of a Referenceable Instance<a id="sthref302" name="sthref302"></a><a id="sthref303" name="sthref303"></a><a id="sthref304" name="sthref304"></a><a id="sthref305" name="sthref305"></a></h4>
<p>Before accessing attributes of a referenceable instance, it should be fetched (pinned) on the client side. OO4O implicitly pins the <code>REF</code> value when attribute values are accessed from the <code>OraRef</code> object. After the pin operation, attributes of the referenceable instance are accessed in the same manner as attributes of a value instance represented by the <code>OraObject</code> object.</p>
<p>The following example pins the <code>APERSON</code> <code>REF</code> value (implicitly) and accesses its name and address attributes. Note that accessing the address attribute returns an <code>Address</code> <code>OraObject</code> object.</p>
<pre xml:space="preserve" class="oac_no_warn">set OO4OSession = CreateObject("OracleInProcServer.XOraSession") 
set hrDb = OO4OSession.OpenDatabase("<span class="italic">ExampleDb</span>", "scott/tiger", 0) 
set Customer = hrDb.CreateDynaset("select * from customers", 0&amp;) 
set Person = Customer.Fields("APERSON").Value 
msgbox Person.Name 
set Address = Person.Addr 
msgbox Address.City 
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="serobjch021.htm#BABJHICF">OraRef Object</a></div>
</div>
<!-- class="sect3" -->
<a id="BGBEEBCF" name="BGBEEBCF"></a><a id="OOFOL214" name="OOFOL214"></a>
<div class="sect3">
<h4 class="sect3">Modifying Attributes of a Referenceable Instance<a id="sthref306" name="sthref306"></a><a id="sthref307" name="sthref307"></a><a id="sthref308" name="sthref308"></a><a id="sthref309" name="sthref309"></a></h4>
<p>Because a referenceable instance is stored in a row of an object table, modifying attributes of referenceable instance requires an object lock. Therefore, rows corresponding to the object instance in an object table should be locked, which can be done by calling the <code>Edit</code> method of the <code>OraRef</code> object. The <code>OraRef</code> <code>Update</code> method releases the object lock.</p>
<p>The following example modifies the age attribute of <code>Person</code> object.</p>
<pre xml:space="preserve" class="oac_no_warn">set OO4OSession = CreateObject("OracleInProcServer.XOraSession") 
set hrDb = OO4OSession.OpenDatabase("<span class="italic">ExampleDb</span>", "scott/tiger", 0) 
set Customer = hrDb.CreateDynaset("select * from customers", 0&amp;) 
set Person = Customer.Fields("APERSON").Value 
Person.Edit 
Person.Age = 45 
Person.Update 
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="serobjch021.htm#BABJHICF">OraRef Object</a></p>
</li>
<li>
<p><a href="sermthod175.htm#BHBEGHDC">Update (OraRef) Method</a></p>
</li>
<li>
<p><a href="sermthod081.htm#BHBGIBAI">Edit (OraRef) Method</a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BGBCEDFA" name="BGBCEDFA"></a><a id="OOFOL215" name="OOFOL215"></a>
<div class="sect1">
<h2 class="sect1">Oracle Collections<a id="sthref310" name="sthref310"></a><a id="sthref311" name="sthref311"></a><a id="sthref312" name="sthref312"></a><a id="sthref313" name="sthref313"></a><a id="sthref314" name="sthref314"></a></h2>
<p>A collection is an ordered group of elements, all of the same type. Each element has a unique subscript, called an index, that determines its position in the collection.</p>
<div class="infoboxnote">
<p class="notep1"><span class="bold">Note</span>:</p>
An <code>OraCollection</code> element index starts at <code>1</code>.</div>
<p>A collection can be subdivided into the following types:</p>
<ul>
<li>
<p>Nested table type</p>
<p>Viewed as a table stored in the column of a database table. When retrieved, the rows of a nested table are given consecutive subscripts starting at 1, and individual rows are accessed using array-like access.</p>
</li>
<li>
<p><code>VARRAY</code> type</p>
<p>Viewed as an array stored in the column of a database table. To reference an element in a <code>VARRAY</code> type, standard subscripting syntax can be used. For example, <code>Grade(3)</code> references the third element in <code>VARRAY</code> <code>Grades</code>.</p>
</li>
</ul>
<p>In Oracle Objects for OLE, an Oracle collection type is represented by the <code>OraCollection</code> interface. The following topics provide more information:</p>
<ul>
<li>
<p><a href="#CHDBACJA">About the OraCollection Interface</a></p>
</li>
<li>
<p><a href="#BGBHJDGG">Retrieving a Collection Type Instance from the Database</a></p>
</li>
<li>
<p><a href="#BGBBGCDI">Accessing Collection Elements</a></p>
</li>
<li>
<p><a href="#BGBJFIEC">Modifying Collection Elements</a></p>
</li>
<li>
<p><a href="#BGBFEJIA">Creating a VARRAY Collection Type</a></p>
</li>
<li>
<p><a href="#BABEBHDD">Creating a Dynaset from an OraCollection Object</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="serobjch008.htm#BABGFAAA">"OraCollection Object"</a></p>
</li>
<li>
<p><a href="appendix.htm#CHDCBCCE">"Schema Objects Used in OraCollection Examples"</a></p>
</li>
</ul>
</div>
<a id="CHDBACJA" name="CHDBACJA"></a><a id="OOFOL216" name="OOFOL216"></a>
<div class="sect2">
<h3 class="sect2">About the OraCollection Interface<a id="sthref315" name="sthref315"></a></h3>
<p>The <code>OraCollection</code> interface provides methods for accessing and manipulating Oracle collection types, namely variable-length arrays (<code>VARRAY</code>s) and nested tables in OO4O. Elements contained in a collection are accessed by subscripts.</p>
<p>The following Visual Basic example illustrates how to access attributes of the <code>EnameList</code> object from the department table:</p>
<pre xml:space="preserve" class="oac_no_warn">Set Person = OraDatabase.CreateDynaset("select * from department",0&amp;)
set EnameList = Department.Fields("Enames").Value
 
'access all elements of the EnameList VArray
for I=1 to I=EnameList.Size
   msgbox EnameList(I)
Next I
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="serobjch008.htm#BABGFAAA">OraCollection Object</a></div>
</div>
<!-- class="sect2" -->
<a id="BGBHJDGG" name="BGBHJDGG"></a><a id="OOFOL217" name="OOFOL217"></a>
<div class="sect2">
<h3 class="sect2">Retrieving a Collection Type Instance from the Database<a id="sthref316" name="sthref316"></a><a id="sthref317" name="sthref317"></a></h3>
<p>A collection type can be retrieved using OO4O in the following ways:</p>
<a id="OOFOL218" name="OOFOL218"></a>
<div class="sect3"><a id="sthref318" name="sthref318"></a>
<h4 class="sect3">Using a Dynaset Object</h4>
<p>If a table contains a collection type column and a dynaset query selects against that column, then the <code>Value</code> property of the <code>OraField</code> object returns an <code>OraCollection</code> object.</p>
<p>The following example selects the <code>ENAMES</code> column from the <code>department</code> table, and an <code>EnameList</code> object is retrieved from the <code>OraField</code> object:</p>
<pre xml:space="preserve" class="oac_no_warn">set OO4OSession = CreateObject("OracleInProcServer.XOraSession") 
set hrDb = OO4OSession.OpenDatabase("<span class="italic">ExampleDb</span>", "scott/tiger", 0) 
Set Dept = hrDb.CreateDynaset("select * from department", 0&amp;) 
Set EnameList = Dept.Fields("ENAMES").Value 
</pre></div>
<!-- class="sect3" -->
<a id="OOFOL219" name="OOFOL219"></a>
<div class="sect3"><a id="sthref319" name="sthref319"></a>
<h4 class="sect3">Using a Parameter Object</h4>
<p>If a SQL statement or PL/SQL block has a bind variable of collection type, then you create a <code>OraParameter</code> object using the <code>OraParameters</code> <code>Add</code> method. The <code>Value</code> property of the <code>OraParameter</code> object for that bind variable returns an <code>OraCollection</code> object.</p>
<p>The following example uses a collection data type as a bind variable in a PL/SQL anonymous block and selects a collection type from the database:</p>
<pre xml:space="preserve" class="oac_no_warn">set OO4OSession = CreateObject("OracleInProcServer.XOraSession") 
set hrDb = OO4OSession.OpenDatabase("<span class="italic">ExampleDb</span>", "scott/tiger", 0) 
hrDb.Parameters.Add "ENAMES", Null, ORAPARM_OUTPUT, ORATYPE_VARRAY, "ENAMELIST" 
hrDb.ExecuteSQL ("BEGIN select enames into :ENAMES from department" &amp; _ 
              "where dept_id = 10; END;") 
set EnameList = hrDb.Parameters("ENAMES").Value 
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="serobjch008.htm#BABGFAAA">OraCollection Object</a></p>
</li>
<li>
<p><a href="serobjch012.htm#BABHHJGE">OraField Object</a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BGBBGCDI" name="BGBBGCDI"></a><a id="OOFOL220" name="OOFOL220"></a>
<div class="sect2">
<h3 class="sect2">Accessing Collection Elements<a id="sthref320" name="sthref320"></a><a id="sthref321" name="sthref321"></a></h3>
<p>Individual element values are accessed by using a subscript. For example, the <code>Value</code> returned by the <code>OraCollection</code> object for subscript <code>1</code> is the element value at index <code>1</code>. The maximum value of the subscript is equal to the total number of elements in the collection including any deleted elements. The <code>OraCollection</code> subscript starts from 1.</p>
<p>The following example code retrieves the <code>Enamelist</code> collection instance and accesses its elements at the first and second index.</p>
<pre xml:space="preserve" class="oac_no_warn">set OO4OSession = CreateObject("OracleInProcServer.XOraSession") 
set hrDb = OO4OSession.OpenDatabase("<span class="italic">ExampleDb</span>", "scott/tiger", 0) 
Set Dept = hrDb.CreateDynaset("select * from department", 0&amp;) 
Set EnameList = Dept.Fields("ENAMES").Value 
msgbox EnameList(1) 
msgbox EnameList(2) 
</pre>
<p>This code displays all the element values of the <code>EnameList</code> collection.</p>
<pre xml:space="preserve" class="oac_no_warn">For I = 1 to EnameList.Size 
   msgbox EnameList(I) 
Next I 
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="serobjch008.htm#BABGFAAA">OraCollection Object</a></div>
</div>
<!-- class="sect2" -->
<a id="BGBJFIEC" name="BGBJFIEC"></a><a id="OOFOL221" name="OOFOL221"></a>
<div class="sect2">
<h3 class="sect2">Modifying Collection Elements<a id="sthref322" name="sthref322"></a><a id="sthref323" name="sthref323"></a></h3>
<p>If the collection instance is retrieved using a dynaset object, element values can be modified between a dynaset <code>Edit</code> and <code>Update</code> pair. The following example code modifies the second element value of an <code>Enamelist</code> collection instance.</p>
<pre xml:space="preserve" class="oac_no_warn">set OO4OSession = CreateObject("OracleInProcServer.XOraSession") 
set hrDb = OO4OSession.OpenDatabase("<span class="italic">ExampleDb</span>", "scott/tiger", 0) 
 
Set OraDynaset = hrDb.CreateDynaset("select * from department", 0&amp;) 
Set EnameList = OraDynaset.Fields("ENAMES").Value 
 
OraDynaset.Edit 
    EnameList(2) = "Chris" 
OraDynaset.Update 
</pre></div>
<!-- class="sect2" -->
<a id="BGBFEJIA" name="BGBFEJIA"></a><a id="OOFOL222" name="OOFOL222"></a>
<div class="sect2">
<h3 class="sect2">Creating a VARRAY Collection Type<a id="sthref324" name="sthref324"></a><a id="sthref325" name="sthref325"></a><a id="sthref326" name="sthref326"></a></h3>
<p>The example code that follows creates a <code>VARRAY</code> collection type <code>ENAMELIST</code> and a <code>department</code> table having <code>ENAMELIST</code> collection type column.</p>
<pre xml:space="preserve" class="oac_no_warn">set OO4OSession = CreateObject("OracleInProcServer.XOraSession") 
set hrDb = OO4OSession.OpenDatabase("<span class="italic">Exampledb</span>", "scott/tiger", 0)
hrDb.ExecuteSQL("CREATE TYPE ENAMELIST AS VARRAY(20) OF VARCHAR2(30)") 
hrDb.ExecuteSQL("CREATE TABLE department (dept_id NUMBER(2),name" &amp; _ 
               "VARCHAR2(15),ENAMES ENAMELIST)") 
</pre>
<p>The following script inserts some collection data into <code>department</code> table:</p>
<pre xml:space="preserve" class="oac_no_warn">hrDb.ExecuteSQL("INSERT INTO department VALUES(10, 'ACCOUNTING'," &amp; _ 
               "ENAMELIST('KING','CLARK','MILLER') )") 
hrDb.ExecuteSQL("INSERT INTO department VALUES(20, 'RESEARCH'," &amp; _ 
               "ENAMELIST('JONES','SCOTT','ADAMS','SMITH','FORD') )") 
hrDb.ExecuteSQL("INSERT INTO department VALUES(30, 'SALES'," &amp; _ 
               "ENAMELIST('BLAKE','MARTIN','ALLEN','TURNER','JAMES') )")
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="serobjch008.htm#BABGFAAA">OraCollection Object</a></div>
</div>
<!-- class="sect2" -->
<a id="BABEBHDD" name="BABEBHDD"></a><a id="OOFOL223" name="OOFOL223"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Creating a Dynaset from an OraCollection Object<a id="sthref327" name="sthref327"></a><a id="sthref328" name="sthref328"></a><a id="sthref329" name="sthref329"></a></h3>
<p>A <code>SELECT</code> query can be issued against instances of the <code>VARRAY</code> and nested table collection types using SQL <code>THE</code> or <code>TABLE</code> operators and individual elements can be accessed as rows. If these collection types have object types for element types, then individual attributes of the object type represents fields of a row.</p>
<p>For example, if an object type X has attributes a, b, and c, and the element type of the collection is object type X, then the <code>SELECT</code> query on this collection returns a, b, and c fields.</p>
<p>In OO4O, read-only dynaset objects can be created from <code>SELECT</code> queries on the collection. Individual elements are accessed using row navigation. If the collection type has an object type as its element type, then attributes of that object type (element) are accessed using the <code>OraField</code> object.</p>
<p>This discussion assumes you have a <code>Course</code> object type and a <code>CourseList</code> nested table collection type with <code>Course</code> as its element type, as described here:</p>
<pre xml:space="preserve" class="oac_no_warn">CREATE TYPE Course AS OBJECT ( 
    course_no NUMBER(4), 
    title VARCHAR2(35), 
    credits NUMBER(1) 
); 
CREATE TYPE CourseList AS TABLE OF Course;
</pre>
<p>In OO4O, <code>CourseList</code> <code>OraCollection</code> represents an instance of the <code>CourseList</code> collection type.</p>
<pre xml:space="preserve" class="oac_no_warn">Dim CourseList as OraCollection 
</pre>
<p>Assume that you have valid a <code>CourseList</code> collection instance:</p>
<pre xml:space="preserve" class="oac_no_warn">set CourseList = ...... 
</pre>
<p>The SQL <code>THE</code> or <code>TABLE</code> operator needs collection type as a bind variable. Create a <code>OraParameter</code> object for the <code>CourseList</code> <code>OraCollection</code> as follows:</p>
<pre xml:space="preserve" class="oac_no_warn">OraDatabase.Parameters.Add "COURSELIST", CourseList, ORAPARM_INPUT, _
            ORATYPE_TABLE, "COURSELIST" 
</pre>
<p>Create a read-only dynaset based on the <code>CourseList</code> using the SQL <code>THE</code> operator:</p>
<pre xml:space="preserve" class="oac_no_warn">Set CourseListDyn = OraDatabase.CreateDynaset("select * from THE (select" &amp; _
           "CAST(:COURSELIST AS COURSELIST) from dual)", ORADYN_READONLY)
</pre>
<p>You can also create a read-only dynaset based on the <code>CourseList</code> using the SQL <code>TABLE</code> operator, which is available only in OO4O with libraries from release Oracle9<span class="italic">i</span> and on:</p>
<pre xml:space="preserve" class="oac_no_warn">Set CourseListDyn = OraDatabase.CreateDynaset("select * from" &amp; _
          "TABLE(CAST(:COURSELIST AS COURSELIST))", ORADYN_READONLY) 

'display the course_no field 
msgbox CourseListDyn.Fields("course_no").Value 

'display the title field 
msgbox CourseListDyn.Fields("title").Value 

'move to next row 
OraDynaset.MoveNext 
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="serobjch008.htm#BABGFAAA">OraCollection Object</a></div>
<a id="OOFOL224" name="OOFOL224"></a>
<p class="subhead2">Example: Creating a Dynaset from an OraCollection Object</p>
<p>The following example illustrates how to create a dynaset from an <code>OraCollection</code> object. Before running the sample code, make sure that you have the necessary data types and tables in the database. See <a href="appendix.htm#CHDCBCCE">"Schema Objects Used in OraCollection Examples"</a>.</p>
<pre xml:space="preserve" class="oac_no_warn">Dim OraSession as OraSession 
Dim OraDatabase as OraDatabase 
Dim OraDynaset as OraDynaset 
Dim CourseList as OraCollection 
Dim Course as OraObject 
Dim CourseListDyn as OraDynaset 
 
'create the OraSession Object. 
Set OraSession = CreateObject("OracleInProcServer.XOraSession") 
 
'create the OraDatabase Object by opening a connection to Oracle. 
Set OraDatabase = OraSession.OpenDatabase("<span class="italic">ExampleDb</span>", "scott/tiger",  0&amp;) 
 
'create a dynaset object from division 
set OraDynaset = OraDatabase.CreateDynaset("select * from division", 0&amp;) 
 
'retrieve a Courses column from Division. Here Value property 
'of OraField object 'returns CourseList OraCollection 
set CourseList = OraDynaset.Fields("Courses").Value 
 
'create a input parameter for CourseList for nested table dynaset 
OraDatabase.Parameters.Add "COURSELIST", CourseList, ORAPARM_INPUT, _
                 ORATYPE_TABLE, "COURSELIST" 
 
'create a read only dynaset based on the CourseList. 
Set CourseListDyn = OraDatabase.CreateDynaset("select * from" &amp; _ 
                 "THE(select CAST(:COURSELIST AS COURSELIST) from dual)", _
                 ORADYN_READONLY) 
 
'dynaset can also be created from Oracle8 collection using the
'following statement 
'Set CourseListDyn = OraDatabase.CreateDynaset("select * from    
'TABLE(CAST(:COURSELIST AS COURSELIST))", ORADYN_READONLY) 

'get the field values of the collection dynaset 
msgbox CourseListDyn.Fields("title").Value 
msgbox CourseListDyn.Fields("course_no").Value 
 
'move the original dynaset to second row 
Oradynaset.MoveNext 
 
'set the new value of CourseList  collection from the second row 
'of main dynaset to the "COURSELIST" parameter 
OraDatabase.Parameters("COURSELIST").Value = CourseList 
 
'refresh the collection dynaset. Now the collection dynaset values are refreshed 
'with new collection value. CourseListDyn.Refresh 
'get the field values of the collection dynaset 
msgbox CourseListDyn.Fields("title").Value 
msgbox CourseListDyn.Fields("course_no").Value 
</pre></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BGBBDADI" name="BGBBDADI"></a><a id="OOFOL225" name="OOFOL225"></a>
<div class="sect1">
<h2 class="sect1">Advanced Queueing Interfaces<a id="sthref330" name="sthref330"></a><a id="sthref331" name="sthref331"></a><a id="sthref332" name="sthref332"></a><a id="sthref333" name="sthref333"></a><a id="sthref334" name="sthref334"></a></h2>
<p>Oracle Objects for OLE provides the <code>OraAQ</code> Automation interface with methods for enqueuing and dequeuing messages. The <code>OraAQMsg</code> object contains the message to be enqueued or dequeued. The message can be a <code>RAW</code> message or any user-defined type.</p>
<p>The following examples illustrate how to enqueue <code>RAW</code> messages from the <code>DBQ</code> queue. Note that <code>the DBQ queue</code> must already be created in the database.</p>
<pre xml:space="preserve" class="oac_no_warn">Dim Q as OraAQ 
Dim Msg as OraAQMsg 
set OO4OSession = CreateObject("OracleInProcServer.XOraSession") 
set empDb = OO4OSession.OpenDatabase("ExampleDb", "scott/tiger", 0) 
Set Q = empDb.CreateAQ("DBQ") 
Retrieve the message object from the Q object. 
set Msg = Q.AQMsg 
Specify the message value. 
Msg.Value = "This is the first Test message" 
Enqueue the message. 
Q.Enqueue 
</pre>
<p>The following lines enqueue a high priority message.</p>
<pre xml:space="preserve" class="oac_no_warn">Msg.Priority = ORAQMSG_HIGH_PRIORITY 
Msg.Delay = 5 
Msg.Value = "Urgent message" 
Q.Enqueue 
</pre>
<p>The following example dequeues the <code>RAW</code> messages from Oracle Database and displays the message content.</p>
<pre xml:space="preserve" class="oac_no_warn">Q.Dequeue 
MsgBox Msg.value 
Dequeue and display the first high priority message 
Msg.Priority = ORAQMSG_HIGH_PRIORITY 
Q.Dequeue 
MsgBox Msg.value 
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="serobjch001.htm#BABHFDJF">OraAQ Object</a></div>
<a id="BABGIGAC" name="BABGIGAC"></a><a id="OOFOL226" name="OOFOL226"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Monitoring Messages<a id="sthref335" name="sthref335"></a><a id="sthref336" name="sthref336"></a><a id="sthref337" name="sthref337"></a><a id="sthref338" name="sthref338"></a><a id="sthref339" name="sthref339"></a><a id="sthref340" name="sthref340"></a><a id="sthref341" name="sthref341"></a><a id="sthref342" name="sthref342"></a></h3>
<p>The <code>OraAQ</code> monitor methods (<code>MonitorStart</code> and <code>MonitorStop</code>) provide asynchronous dequeuing through notifications. This is suitable for applications that prefer to process messages in nonblocking mode. Applications can request to be notified on arrival of messages, by supplying an Automation object to the <code>Monitor</code> method. This object implements a method called <code>NotifyMe</code> to receive notifications. Messages can be monitored based on consumer name, message ID, or correlation.</p>
<p>The following sample code demonstrates a simple use of this facility. It illustrates a computerized trading system that executes buy/sell limit orders.</p>
<p>The sample instantiates a queue object for the <code>STOCKS_TO_TRADE</code> queue and monitors messages intended for consumer <code>BROKER_AGENT</code>. <code>STOCKS_TO_TRADE</code> queues messages of the user-defined type <code>TRADEORDER_TYPE</code>. This encapsulates all the information required to initiate a trade order. When messages addressed to the <code>BROKER_AGENT</code> are dequeued, the <code>NotifyMe</code> method of the <code>CallbackClient</code> object is invoked, and a stock trade is performed.</p>
<pre xml:space="preserve" class="oac_no_warn">'First instantiate the CallbackClient. The queue monitor 
' will invoke the NotifyMe on this class module.
Public CB_Client As New CallbackClient 
 
  Dim DB As OraDatabase
  Dim Q as OraAQ
  set Q = DB.CreateAQ("STOCKS_TO_TRADE") 

'Notify by calling cbclient::NotifyMe when there are messages
' for consumer '"BROKER_AGENT"
  Q.consumer = "BROKER_AGENT"

'Note that cbclient is a dispatch interface that supports the NotifyMe method.
  Dim s as string
  s = "BROKER_AGENT"
 'Notify the client only when there are messages for "BROKER_AGENT"
  Q.MonitorStart CB_Client, Q, s, 1
'other processing is performed here... 
 
  Q.MonitorStop 
Return 
'Now implement the NotifyMe method of the CallbackClient class module
'and the necessary arguments that will contain the dequeued message
'NotifyMe is the callback interface defined by user. Ctx here is the
'Q object passed in at the time of MontiorStart.
Public sub NotifyMe (ByVal Ctx As Variant, ByVal Msgid As Variant )
  On Error GoTo NotifyMeErr
  Dim tradingSignal as OraAQMsg
  'Tradeorder contains details of the customer order
  Dim tradeorder as OraObject
  If IsNull(Msgid) Then
          MsgBox "No Message"
          'Get Error
          MsgBox OraDatabase.LastServerErrText
  Else
          mvarMsgid = Msgid
          Set tradingSignal = Ctx.AQMsg(1,"STOCK_TYPE","TRADER")
          set tradeorder = tradingSignal.Value

          'Tradeorder is the object of UDT "STOCK_TYPE"Access signal attribute 
          'of tradeorder as tradeorder("signal).Value or tradeorder!signal
          if (tradeorder!signal = "SELL")
            'Sell the stock
             SellStock(tradeorder!NoOfShares, tradeorder!Ticker, _
                    tradeorder!Price,  tradeorder!ValidUntil)
          else if (tradeorder!signal = "BUY")
             'Buy the stock
              BuyStock(tradeorder!NoOfShares,tradeorder!Ticker, _
                   tradeorder!Price,tradeorder!ValidUntil)
          end if
  End If
NotifyMeErr:
  Call RaiseError(MyUnhandledError, "newcallback:NotifyMe Method")
End Sub
</pre></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BGBHHEIH" name="BGBHHEIH"></a><a id="OOFOL227" name="OOFOL227"></a>
<div class="sect1">
<h2 class="sect1">Database Events<a id="sthref343" name="sthref343"></a><a id="sthref344" name="sthref344"></a><a id="sthref345" name="sthref345"></a><a id="sthref346" name="sthref346"></a></h2>
<p>Oracle Database supports detection and run-time publication of database events.</p>
<p>The database event publication feature allows applications to subscribe to database events just as they subscribe to messages from other applications.</p>
<p>Users can enable the publication of the following events:</p>
<ul>
<li>
<p>DML events (<code>DELETE</code>, <code>INSERT</code>, <code>UPDATE</code>)</p>
</li>
<li>
<p>DDL events (<code>CREATE</code>, <code>ALTER</code>, <code>DROP</code>)</p>
</li>
<li>
<p>Database events (<code>SERVERERROR</code>, <code>LOGON</code>, <code>LOGOFF</code>, <code>STARTUP</code>, <code>SHUTDOWN</code>)</p>
</li>
</ul>
<p>The event publication subsystem is integrated with the AQ publish and subscribe engine.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<p><a class="olink SQLRF" href="http://www.oracle.com/pls/db102/lookup?id=SQLRF"><span class="italic">Oracle Database SQL Language Reference</span></a> for a complete description of triggers for data and system events</p>
</div>
<p>Oracle Objects for OLE provides functionality to enable COM users to subscribe to Oracle Database events.</p>
<p>This feature supports asynchronous notification of database events to interested subscribers. Under this model, the client can subscribe to be notified of a database or system event, with each request stored as a subscription.</p>
<p>When the database event of interest fires, the subscriber is notified by the database event handler. The event handler was registered at the time of the event's subscription.</p>
<p>OO4O provides the <code>OraSubscription</code> object that represents the subscription to a database event and the <code>OraSubscriptions</code> collection that maintains a list of <code>OraSubscription</code> objects.</p>
<p>To subscribe to a database event, you must:</p>
<ul>
<li>
<p>Create a subscription, based on the database event of interest.</p>
</li>
<li>
<p>Provide a database event handler. The database event handler should be an automation object that implements the <code>NotifyDBEvents</code> method. The <code>NotifyDBEvents</code> method is invoked by OO4O when the subscribed database events are fired.</p>
</li>
<li>
<p>Register the subscription, using the <code>Register</code> method.</p>
</li>
</ul>
<a id="OOFOL228" name="OOFOL228"></a><a id="CIHDJCJC" name="CIHDJCJC"></a>
<p class="subhead2">Example: Registering an Application for Notification of Database Events</p>
<p>In the following example, an application subscribes for notification of database logon events (such as all logons to the database). When a user logs on to the database, the <code>NotifyDBEvents</code> method of the <code>DBEventsHdlr</code> that was passed in at the time of subscription is invoked. The context-sensitive information and the event-specific information are passed into the <code>NotifyDBEvents</code> method.</p>
<p>The <code>DBEventsHdlr</code> in this example is <code>DBEventCls</code>, which is defined later.</p>
<p>The main application is as follows:</p>
<pre xml:space="preserve" class="oac_no_warn">' First instantiate the dbevent handler. The dbevent notification
' will fire the NotifyDBEvents on the callback handler.
 
Public DBEventsHdlr As New DBEventCls
Private Sub Form_Load()
    Dim gOraSession As Object
    Dim gOraSubscriptions As OraSubscriptions 
    Dim gOraDatabase As OraDatabase
 
    'Create the OraSession Object
    Set gOraSession = CreateObject("OracleInProcServer.XOraSession")
 
   'Create the OraDatabase Object by opening a connection to Oracle.
    Set gOraDatabase = gOraSession.DbOpenDatabase                      
             ("ora90.us.oracle.com", "pubsub/pubsub", 
              ORADB_ENLIST_FOR_CALLBACK)
    Set gOraSubscriptions = gOraDatabase.Subscriptions
    gOraSubscriptions.Add "PUBSUB.LOGON:ADMIN", DBEventsHdlr,
             gOraDatabase
    gOraSubscriptions(0).Register
    MsgBox "OK"
End Sub
</pre>
<p>The database event handler class that defines the <code>NotifyDBEvents</code> method is as follows:</p>
<pre xml:space="preserve" class="oac_no_warn">Public countofMsgs as integer
Public Function NotifyDBEvents(Ctx As Variant, Payload As Variant )
    On error goto NotifyMeErr
 
    MsgBox "Retrieved payload " + Payload
   ' do something - here the subscription is unregistered after
   ' receiving 3 notifications
    countofMsgs = countofMsgs + 1
    If countofMsgs &gt; 3 Then
        Ctx.Subscriptions(0).UnRegister
    End If
    Exit Sub
NotifyMeErr:
    Call RaiseError(MyUnhandledError, "newcallback:NotifyMe Method")
 
End Sub
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="serobjch025.htm#BABJAFDF">OraSubscription Object</a></p>
</li>
<li>
<p><a href="serobjch032.htm#BABEEJJI">OraSubscriptions Collection</a></p>
</li>
<li>
<p><a href="sermthod150.htm#BHBEADHJ">Register Method</a></p>
</li>
<li>
<p>"Triggers on System Events and User Events" in <a class="olink CNCPT" href="http://www.oracle.com/pls/db102/lookup?id=CNCPT"><span class="italic">Oracle Database Concepts</span></a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect1" -->
<a id="CIHGBCIA" name="CIHGBCIA"></a><a id="OOFOL229" name="OOFOL229"></a>
<div class="sect1">
<h2 class="sect1">Application Failover Notifications<a id="sthref347" name="sthref347"></a><a id="sthref348" name="sthref348"></a><a id="sthref349" name="sthref349"></a></h2>
<p>Application failover notifications can be used in the event of the failure of one database instance and failover to another instance. Because delay can occur during a failover, the application developer may want to inform the user that a failover is in progress, and request that the user stand by. Additionally, the session on the initial instance may have received some <code>ALTER</code> <code>SESSION</code> commands. These are not automatically replayed on the second instance. Therefore, the developer may want to replay these <code>ALTER</code> <code>SESSION</code> commands on the second instance.</p>
<a id="OOFOL230" name="OOFOL230"></a>
<div class="sect2"><a id="sthref350" name="sthref350"></a>
<h3 class="sect2">Failover Notification Registration<a id="sthref351" name="sthref351"></a><a id="sthref352" name="sthref352"></a><a id="sthref353" name="sthref353"></a><a id="sthref354" name="sthref354"></a></h3>
<p>To address the problems described, OO4O supports application failover notifications. To receive failover notifications, a notification handler must be registered with the <code>MonitorForFailover</code> method of the <code>OraDatabase</code> object. The notification handler must be an automation object (class module in Visual Basic) that implements the <code>OnFailover</code> method. An <code>IDispatch</code> pointer to this automation object must be passed in, along with any client-specific context, at the time of registering for failover notifications.</p>
<p>In the event of failover, the <code>OnFailover</code> method is invoked several times during the course of reestablishing the user's session. The first call to the <code>OnFailover</code> method of the notification handler occurs when the database first detects an instance connection loss. This is intended to allow the application to inform the user of an upcoming delay. If a failover is successful, a second call to the <code>OnFailover</code> method occurs when the connection is reestablished and usable. At this time, the client may want to replay the <code>ALTER</code> <code>SESSION</code> commands and inform the user that a failover has happened.</p>
<p>If a failover is unsuccessful, then the <code>OnFailover</code> method is called to inform the application that the failover will not take place.</p>
<p>An example of failover registration is included as part of the example in the next section.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="sermthod128.htm#CIHBAHEJ">MonitorForFailover Method</a></p>
</li>
<li>
<p><a href="serobjch010.htm#BABGDAJI">OraDatabase Object</a></p>
</li>
<li>
<p><a class="olink NETAG" href="http://www.oracle.com/pls/db102/lookup?id=NETAG"><span class="italic">Oracle Net Services Administrator's Guide</span></a>for detailed information about application failover</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="OOFOL231" name="OOFOL231"></a>
<div class="sect2"><a id="sthref355" name="sthref355"></a>
<h3 class="sect2">Enabling Failover<a id="sthref356" name="sthref356"></a><a id="sthref357" name="sthref357"></a><a id="sthref358" name="sthref358"></a></h3>
<p>To enable failover notifications, the option <code>ORADB_ENLIST_FOR_CALLBACK</code> must be passed into the call to the <code>OpenDatabase</code> method.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="sermthod141.htm#CIHCBJHD">OpenDatabase Method</a></div>
<a id="BABHEHBB" name="BABHEHBB"></a><a id="OOFOL232" name="OOFOL232"></a>
<p class="subhead2">Example: Failover Notification</p>
<p>The following sample shows a typical developer-defined <code>OnFailover</code> implementation and demonstrates how to register an application.</p>
<pre xml:space="preserve" class="oac_no_warn">'Implement the OnFailover method of the FailoverClient class module and the 
' necessary arguments that will contain the dequeued message. Ctx  here is
' the application-defined context sensitive object that was passed
' in while registering with MonitorForFailover.
' An error of OO4O_FO_ERROR indicates that failover was unsuccessful, but the 
' application can handle the and retry failover by returning  
' a value of OO4O_FO_RETRY 
 
Public Function OnFailover(Ctx As Variant, fo_type As Variant,fo_event _
                     as variant, fo_OraDB as Variant) 
Dim str As String 

OnFailover=0 
str = Switch(fo_type = 1&amp;, "NONE", fo_type = 2&amp;, "SESSION", fo_type = _ 
                  4&amp;, "SELECT") 
If IsNull(str) Then 
   str = "UNKNOWN!" 
End If 
If fo_event= OO4O_FO_ERROR Then 
   MsgBox "Failover error gotten. Retrying " 
   OnFailover = OO4O_FO_RETRY 
   End If 
If fo_event = OO4O_FO_BEGIN Then 
   MsgBox " Failing Over .... with failover type : " &amp; str 
Else 
   MsgBox "Failover Called with event : " &amp; fo_event 
End If 
End Function 
</pre>
<a id="OOFOL233" name="OOFOL233"></a>
<p class="subhead2">Registering the Application to Receive Failover Notifications</p>
<pre xml:space="preserve" class="oac_no_warn">' First instantiate the Failover_Client. The Failover notification 
' will invoke the OnFailover on this class module 
 
Public Failover_Client As New FailoverClient 
Dim OraDatabase As OraDatabase 
Dim OraSession As OraSession 
Set OraSession = CreateObject("OracleInProcServer.XOraSession") 
 
' Pass in the entire database name (ie., the entire Tnsnames entry 
' with the domain name)in the opendatabase call 
Set OraDatabase = OraSession.DbOpenDatabase("Exampledb.us.oracle.com", _ 
          "scott/tiger", ORADB_ENLIST_FOR_CALLBACK) 
OraDatabase.MonitorForFailover Failover_Client, OraDatabase
</pre></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BGBJAIAD" name="BGBJAIAD"></a><a id="OOFOL234" name="OOFOL234"></a>
<div class="sect1">
<h2 class="sect1">XML Generation<a id="sthref359" name="sthref359"></a><a id="sthref360" name="sthref360"></a><a id="sthref361" name="sthref361"></a><a id="sthref362" name="sthref362"></a><a id="sthref363" name="sthref363"></a></h2>
<p>Oracle Objects for OLE support for XML enables you to extract data in XML format from an Oracle database.</p>
<p>Data in XML markup language can be integrated with other software components that support XML. Web servers can provide XML documents along with a style sheet, thus separating the data content from its presentation, and preserving the data in its native form for easy searching.</p>
<p>Using Extensible Stylesheet Language Transformations (XSLT), developers can reformat XML documents received from other businesses into their desired style.</p>
<p>For more information about XML, go to</p>
<p><code><a href="http://www.w3.org/XML/">http://www.w3.org/XML/</a></code></p>
<a id="OOFOL235" name="OOFOL235"></a>
<p class="subhead2">XML Generation Example</p>
<p>OO4O renders XML from the contents of any <code>OraDynaset</code> method based on a starting row number and continuing for up to a specified amount of rows. For example:</p>
<a id="OOFOL236" name="OOFOL236"></a>
<p class="subhead2">OO4O Code</p>
<pre xml:space="preserve" class="oac_no_warn">Dim XMLString As String 
Dim startrow as Integer 
Dim maxrows as Integer 
Set OraSession = CreateObject("OracleInProcServer.XOraSession") 
Set OraDatabase = OraSession.OpenDatabase("<span class="italic">ExampleDb</span>", "scott/tiger", 0&amp;) 
Set OraDynaset = OraDatabase.CreateDynaset("select EMPNO, ENAME, COMM, JOB " &amp; _
           "from  EMP", 0&amp;) 
startrow = 4 
maxrows = 2 
 
'Output at most 2 rows beginning at row 4 
XMLString = OraDynaset.GetXML(startrow, maxrows) 
</pre>
<a id="OOFOL237" name="OOFOL237"></a>
<p class="subhead2">XML Output</p>
<pre xml:space="preserve" class="oac_no_warn">&lt;?xml version = "1.0"?&gt; 
&lt;ROWSET&gt; 
&lt;ROW id="4"&gt; 
&lt;EMPNO&gt;7566&lt;/EMPNO&gt; 
&lt;ENAME&gt;JONES&lt;/ENAME&gt; 
&lt;JOB&gt;MANAGER&lt;/JOB&gt; 
&lt;/ROW&gt; 
&lt;ROW id="5"&gt; 
&lt;EMPNO&gt;7654&lt;/EMPNO&gt; 
&lt;ENAME&gt;MARTIN&lt;/ENAME&gt; 
&lt;COMM&gt;1400&lt;/COMM&gt; 
&lt;JOB&gt;SALESMAN&lt;/JOB&gt; 
&lt;/ROW&gt; 
&lt;/ROWSET&gt; 
</pre>
<p>The format of the XML can be customized through the <code>OraDynaset</code> and <code>OraField</code> methods:</p>
<pre xml:space="preserve" class="oac_no_warn">Dim XMLString As String 
Dim startrow as Integer 
Dim maxrows as Integer 
Set OraSession = CreateObject("OracleInProcServer.XOraSession") 
Set OraDatabase = OraSession.OpenDatabase("<span class="italic">ExampleDb</span>", "scott/tiger", 0&amp;) 
Set OraDynaset = OraDatabase.CreateDynaset("select EMPNO, ENAME, COMM," &amp; _ 
            "JOB from EMP", 0&amp;)  
 
'Change the root tag of the XML document 
OraDynaset.XMLRowsetTag = "ALL_EMPLOYEES" 
 
'Change the row tag of the XML document 
OraDynaset.XMLRowTag = "EMPLOYEE" 
 
'Remove the rowid attribute 
OraDynaset.XMLRowID = "" 
 
'Turn on the null indicator 
OraDynaset.XMLNullIndicator = True 
 
'Change the EMPNO tag name 
Set EmpnoField = OraDynaset.Fields("EMPNO") 
EmpnoField.XMLTagName = "EMP_ID" 
 
'and make it an attribute rather than an element 
EmpnoField.XMLAsAttribute = True 
 
'Change the ENAME tag name 
Set EnameField = OraDynaset.Fields("ENAME") 
EnameField.XMLTagName = "NAME" 
 
'Change the COMM tag name 
Set CommField = OraDynaset.Fields("COMM") 
CommField.XMLTagName = "COMMISSION" 
 
'Change the JOB tag name 
Set JobField = OraDynaset.Fields("JOB") 
JobField.XMLTagName = "JOB_TITLE" 
startrow = 4 
maxrows = 2 
 
'Output at most 2 rows beginning at row 4 
XMLString = OraDynaset.GetXML(startrow, maxrows) 
</pre>
<a id="OOFOL238" name="OOFOL238"></a>
<p class="subhead2">Output</p>
<pre xml:space="preserve" class="oac_no_warn">&lt;?xml version = "1.0"?&gt; 
&lt;ALL_EMPLOYEES&gt; 
&lt;EMPLOYEE EMP_ID="7566"&gt; 
&lt;NAME&gt;JONES&lt;/NAME&gt; 
&lt;COMMISSION NULL="TRUE"&gt;&lt;/COMMISSION&gt; 
&lt;JOB_TITLE&gt;MANAGER&lt;/JOB_TITLE&gt; 
&lt;/EMPLOYEE&gt; 
&lt;EMPLOYEE EMP_ID="7654"&gt; 
&lt;NAME NULL&gt;MARTIN&lt;/NAME&gt; 
&lt;COMMISSION&gt;1400&lt;/COMMISSION&gt; 
&lt;JOB_TITLE&gt;SALESMAN&lt;/JOB_TITLE&gt; 
&lt;/EMPLOYEE&gt; 
&lt;/ALL_EMPLOYEES&gt; 
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="serobjch011.htm#BABJBBAI">OraDynaset Object</a></div>
</div>
<!-- class="sect1" -->
<a id="BGBBDGHE" name="BGBBDGHE"></a><a id="OOFOL239" name="OOFOL239"></a>
<div class="sect1">
<h2 class="sect1">Datetime and Interval Data Types<a id="sthref364" name="sthref364"></a><a id="sthref365" name="sthref365"></a><a id="sthref366" name="sthref366"></a><a id="sthref367" name="sthref367"></a></h2>
<p>From Release 9.2.0.4 and later, OO4O provides four new objects that enable developers to access and manipulate the new datetime and interval data types introduced in Oracle9<span class="italic">i</span>. <a href="#CHDEJGDJ">Table 4-3</a> describes the OO4O objects and matching data types.</p>
<div class="tblformal"><a id="OOFOL240" name="OOFOL240"></a><a id="sthref368" name="sthref368"></a><a id="CHDEJGDJ" name="CHDEJGDJ"></a>
<p class="titleintable">Table 4-3 Datetime and Interval Data Types</p>
<table class="Formal" title="Datetime and Interval Data Types" summary="rows contain OO4O objects. column one lists the name and column two their Oracle datatypes" dir="ltr" border="1" width="100%" frame="hsides" rules="groups" cellpadding="3" cellspacing="0">
<col width="30%" />
<col width="*" />
<thead>
<tr align="left" valign="top">
<th align="left" valign="bottom" id="r1c1-t39">OO4O Objects</th>
<th align="left" valign="bottom" id="r1c2-t39">Oracle Data Types</th>
</tr>
</thead>
<tbody>
<tr align="left" valign="top">
<td align="left" id="r2c1-t39" headers="r1c1-t39">
<p><code>OraIntervalDS</code></p>
</td>
<td align="left" headers="r2c1-t39 r1c2-t39">
<p><code>INTERVAL</code> <code>DAY</code> <code>TO</code> <code>SECOND</code></p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r3c1-t39" headers="r1c1-t39">
<p><code>OraIntervalYM</code></p>
</td>
<td align="left" headers="r3c1-t39 r1c2-t39">
<p><code>INTERVAL</code> <code>YEAR</code> <code>TO</code> <code>MONTH</code></p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r4c1-t39" headers="r1c1-t39">
<p><code>OraTimeStamp</code></p>
<p><code>OraTimeStamp</code></p>
</td>
<td align="left" headers="r4c1-t39 r1c2-t39">
<p><code>TIMESTAMP</code></p>
<p><code>TIMESTAMP</code> <code>WITH</code> <code>LOCAL</code> <code>TIME</code> <code>ZONE</code></p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r5c1-t39" headers="r1c1-t39">
<p><code>OraTimeStampTZ</code></p>
</td>
<td align="left" headers="r5c1-t39 r1c2-t39">
<p><code>TIMESTAMP</code> <code>WITH</code> <code>TIME</code> <code>ZONE</code></p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p>Instances of these types can be fetched from the database or passed as input or output variables to SQL statements and PL/SQL blocks, including stored procedures and functions.</p>
<p>These new data types are not supported as elements in collections such as PL/SQL indexed tables, <code>VARRAY</code>s, or nested tables.</p>
<a id="OOFOL241" name="OOFOL241"></a>
<div class="sect2"><a id="sthref369" name="sthref369"></a>
<h3 class="sect2">Obtaining Datetime and Interval Data Types</h3>
<p>OO4O datetime and interval data types can be obtained using:</p>
<ul>
<li>
<p>The <code>Value</code> property of an <code>OraField</code> object in a dynaset.</p>
</li>
<li>
<p>The <code>Value</code> property of an <code>OraParameter</code> object as an input or an output parameter in SQL statements or PL/SQL blocks.</p>
</li>
<li>
<p>An attribute of another object or <code>REF</code>.</p>
</li>
<li>
<p>The following <code>OraSession</code> methods:</p>
<ul>
<li>
<p><code>CreateOraIntervalDS</code></p>
</li>
<li>
<p><code>CreateOraIntervalYM</code></p>
</li>
<li>
<p><code>CreateOraTimeStamp</code></p>
</li>
<li>
<p><code>CreateOraTimeStampTZ</code></p>
</li>
</ul>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="OOFOL242" name="OOFOL242"></a>
<div class="sect2"><a id="sthref370" name="sthref370"></a>
<h3 class="sect2">Descriptions of Datetime and Interval Data Types</h3>
<ul>
<li>
<p><code>OraTimeStamp</code> object</p>
<p>Provides methods for operations on Oracle <code>TIMESTAMP</code> or <code>TIMESTAMP</code> <code>WITH</code> <code>LOCAL</code> <code>TIME</code> <code>ZONE</code> data types. Operations include accessing the datetime values and performing datetime operations.</p>
</li>
<li>
<p><code>OraTimeStampTZ</code> object</p>
<p>Provides methods for operations on Oracle <code>TIMESTAMP</code> <code>WITH</code> <code>TIME</code> <code>ZONE</code> data types. Operations include accessing the datetime and time zone values and performing datetime operations.</p>
</li>
<li>
<p><code>OraIntervalDS</code> object</p>
<p>Provides methods for operations on the Oracle <code>INTERVAL</code> <code>DAY</code> <code>TO</code> <code>SECOND</code>. This data type represents a period of time in terms of days, hours, minutes, seconds, and nanoseconds.</p>
</li>
<li>
<p><code>OraIntervalYM</code> object</p>
<p>Provides methods for operations on the Oracle <code>INTERVAL</code> <code>YEAR</code> <code>TO</code> <code>MONTH</code>. This data type represents a period of time in terms of years and months.</p>
</li>
</ul>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BGBHHBHE" name="BGBHHBHE"></a><a id="OOFOL243" name="OOFOL243"></a>
<div class="sect1">
<h2 class="sect1">Database Schema Objects<a id="sthref371" name="sthref371"></a><a id="sthref372" name="sthref372"></a><a id="sthref373" name="sthref373"></a></h2>
<p>The <code>OraMetaData</code> interface provides access to the schema information of database objects. It is returned by invoking the <code>Describe</code> method of the <code>OraDatabase</code> interface. The <code>Describe</code> method takes the name of a schema object, such as the <code>emp</code> table and returns an <code>OraMetaData</code> object. The <code>OraMetaData</code> object provides methods for dynamically navigating and accessing all the attributes (<code>OraMDAttribute</code> collection) of a schema object described.</p>
<p>The following Visual Basic script shows a simple example of the <code>OraMetaData</code> interface. The sample retrieves and displays several attributes of the <code>emp</code> table.</p>
<pre xml:space="preserve" class="oac_no_warn">Dim empMD as OraMetaData 

set OO4OSession = CreateObject("OracleInProcServer.XOraSession") 
set empDb = OO4OSession.OpenDatabase("<span class="italic">ExampleDb</span>", "scott/tiger", 0) 

'Add EMPNO as an Input parameter and set its initial value. 
Set empMd = empDb.Describe("emp")
 
'Get the column attribute collections. 
Set empColumnsMd = empMd("ColumnList").Value 

'Display name, data type, and size of each column in the emp table. 
For I = 0 To empColumnsMd.Count - 1 
   Set ColumnMd = empColumnsMd(I).Value 
   MsgBox ColumnMd("data type").Value 
   MsgBox ColumnMd("Name").Value 
Next I 
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="serobjch016.htm#BABFCGEJ">OraMetaData Object</a></p>
</li>
<li>
<p><a href="serobjch015.htm#BABEDGEE">OraMDAttribute Object</a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect1" --></div>
<!-- class="ind" -->
<div class="footer">
<hr />
<table class="simple oac_no_warn" summary="" cellspacing="0" cellpadding="0" width="100%">
<col width="33%" />
<col width="*" />
<col width="33%" />
<tr>
<td align="left">
<table class="simple oac_no_warn" summary="" cellspacing="0" cellpadding="0" width="98">
<tr>
<td align="center" valign="top"><a href="basfeat.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td align="center" valign="top"><a href="tips.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td style="font-size: 90%" align="center" class="copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1994, 2010,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td align="right">
<table class="icons oac_no_warn" summary="" cellspacing="0" cellpadding="0" width="245">
<tr>
<td align="center" valign="top"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td align="center" valign="top"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td align="center" valign="top"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td align="center" valign="top"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td align="center" valign="top"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
</div>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
