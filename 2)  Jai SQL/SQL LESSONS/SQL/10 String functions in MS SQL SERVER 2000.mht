From: <Saved by Windows Internet Explorer 7>
Subject: SQL(DML)?help: String functions in MS SQL SERVER 2005
Date: Wed, 26 Dec 2012 10:15:14 +0800
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----=_NextPart_000_00AD_01CDE351.E53E8BB0"
X-MimeOLE: Produced By Microsoft MimeOLE V6.00.2900.5579

This is a multi-part message in MIME format.

------=_NextPart_000_00AD_01CDE351.E53E8BB0
Content-Type: text/html;
	charset="windows-1251"
Content-Transfer-Encoding: quoted-printable
Content-Location: http://sql-ex.ru/help/select10.php

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" =
"http://www.w3c.org/TR/1999/REC-html401-19991224/loose.dtd">
<HTML =
xmlns=3D"http://www.w3.org/1999/xhtml"><HEAD><TITLE>SQL(DML)=A0help: =
String functions in MS SQL SERVER 2005</TITLE><LINK=20
href=3D"http://sql-ex.ru/templates/style.css" type=3Dtext/css =
rel=3Dstylesheet><LINK=20
href=3D"http://sql-ex.ru/templates/help.css" type=3Dtext/css =
rel=3Dstylesheet><LINK=20
title=3DDefault href=3D"http://sql-ex.ru/help/styles/default.css" =
rel=3Dstylesheet>
<SCRIPT src=3D"http://sql-ex.ru/help/highlight.js" =
type=3Dtext/javascript></SCRIPT>

<META http-equiv=3DContent-Type content=3D"text/html; =
charset=3Dwindows-1251">
<META=20
content=3D"SQL tutorial. Interactive exercises on SELECT, INSERT, =
UPDATE, DELETE statements. Training SQL knowledge and skills. DML =
statements syntax. SQL remote education."=20
name=3DDescription>
<META=20
content=3D"SQL, SELECT, database, sql query, guide, tutorial, sql help =
and faq, education, interactive exercises, testing, learning, training =
SELECT statement, FROM, JOIN, WHERE, GROUP BY, HAVING, INSERT, UPDATE, =
DELETE, sql syntax, Structured Query Language"=20
name=3DKeywords>
<META=20
content=3D"SQL DML Tutorial with examples of usage of all DML =
constructions and statements.  SQL Server usage features. The tutorial =
is accompanied by the exercises which can be carried out  online  on the =
site."=20
name=3Dabstract>
<META=20
content=3D"SQL DML Tutorial with examples of usage of all DML =
constructions and statements.  SQL Server usage features. The tutorial =
is accompanied by the exercises which can be carried out  online  on the =
site."=20
name=3Dtitle>
<SCRIPT language=3DJAVASCRIPT =
src=3D"http://sql-ex.ru/js/main.js"></SCRIPT>

<META content=3D"MSHTML 6.00.6000.16981" name=3DGENERATOR></HEAD>
<BODY bgColor=3D#f5f5f5><A name=3Dref_beg></A><!-- Pingmedia TopLine =
code START-->
<SCRIPT language=3Djavascript type=3Dtext/javascript><!--
(function(L){if(typeof(ar_cn)=3D=3D"undefined")ar_cn=3D1;
var =
S=3D'setTimeout(function(e){if(!self.CgiHref){document.close();e=3Dparent=
.document.getElementById("ar_container_"+ar_bnum);e.parentNode.removeChil=
d(e);}},3000);',
  j=3D' =
type=3D"text/javascript"',t=3D0,D=3Ddocument,n=3Dar_cn;L+=3Descape(D.refe=
rrer||'unknown')+'&rnd=3D'+Math.round(Math.random()*999999999);
function _(){if(t++<100){var F=3DD.getElementById('ar_container_'+n);
  if(F){try{var =
d=3DF.contentDocument||(window.ActiveXObject&&window.frames['ar_container=
_'+n].document);
  if(d){d.write('<sc'+'ript'+j+'>var =
ar_bnum=3D'+n+';'+S+'<\/sc'+'ript><sc'+'ript'+j+' =
src=3D"'+L+'"><\/sc'+'ript>');t=3D0}
  else =
setTimeout(_,100);}catch(e){try{F.src=3D"javascript:{document.write('<sc'=
+'ript"+j+">var ar_bnum=3D"+n+"; document.domain=3D\""
  +D.domain+"\";"+S+"<\/sc'+'ript>');document.write('<sc'+'ript"+j+" =
src=3D\""+L+"\"><\/sc'+'ript>');}";return}catch(E){}}}else =
setTimeout(_,100);}}
D.write('<div =
style=3D"visibility:hidden;height:0px;left:-1000px;position:absolute;"><i=
frame id=3D"ar_container_'+ar_cn
  +'" width=3D1 height=3D1 marginwidth=3D0 marginheight=3D0 =
scrolling=3Dno frameborder=3D0><\/iframe><\/div><div id=3D"ad_ph_'+ar_cn
  +'" style=3D"display:none;"><\/div>');_();ar_cn++;
})('http://ad.adriver.ru/cgi-bin/erle.cgi?sid=3D168786&target=3Dblank&bt=3D=
43&tail256=3D');
//--></SCRIPT>
<!-- Pingmedia TopLine code END -->
<FORM name=3Dfrmtpl>
<TABLE cellPadding=3D5 width=3D"98%" align=3Dcenter border=3D0>
  <TBODY>
  <TR>
    <TD vAlign=3Dcenter width=3D"33%" bgColor=3D#cccccc><B><A =
class=3Dnone=20
      href=3D"http://sql-ex.ru/help/">SQL syntax</A></B></TD>
    <TD vAlign=3Dcenter align=3Dmiddle width=3D"33%"=20
      bgColor=3D#cccccc>Language&nbsp;<SELECT=20
      onchange=3DSel_Lang(document.frmtpl.lsttpl.selectedIndex)=20
        name=3Dlsttpl><OPTION value=3D0>=D0=F3=F1=F1=EA=E8=E9<OPTION =
value=3D1=20
        selected>English</OPTION></SELECT> </TD>
    <TD vAlign=3Dcenter align=3Dright width=3D"33%" bgColor=3D#cccccc><A =

      href=3D"http://sql-ex.ru/help/select0.php">Index</A>&nbsp;<A=20
      href=3D"http://sql-ex.ru/help/select1.php">1</A>&nbsp;<A=20
      href=3D"http://sql-ex.ru/help/select2.php">2</A>&nbsp;<A=20
      href=3D"http://sql-ex.ru/help/select3.php">3</A>&nbsp;<A=20
      href=3D"http://sql-ex.ru/help/select4.php">4</A>&nbsp;<A=20
      href=3D"http://sql-ex.ru/help/select5.php">5</A>&nbsp;<A=20
      href=3D"http://sql-ex.ru/help/select6.php">6</A>&nbsp;<A=20
      href=3D"http://sql-ex.ru/help/select7.php">7</A>&nbsp;<A=20
      href=3D"http://sql-ex.ru/help/select8.php">8</A>&nbsp;<A=20
      =
href=3D"http://sql-ex.ru/help/select9.php">9</A>&nbsp;[<B>10</B>]&nbsp;<A=
=20
      href=3D"http://sql-ex.ru/help/select11.php">11</A>&nbsp;<A=20
      href=3D"http://sql-ex.ru/help/select12.php">12</A>&nbsp;<A=20
      href=3D"http://sql-ex.ru/help/select13.php">13</A>&nbsp;<A=20
      href=3D"http://sql-ex.ru/help/select14.php">14</A>&nbsp;<A=20
      href=3D"http://sql-ex.ru/help/select15.php">15</A>&nbsp;<A=20
      href=3D"http://sql-ex.ru/help/select16.php">16</A>&nbsp;<A=20
      href=3D"http://sql-ex.ru/help/select17.php">17</A>&nbsp;<A=20
      href=3D"http://sql-ex.ru/help/select18.php">18</A>&nbsp;<A=20
      href=3D"http://sql-ex.ru/help/select19.php">19</A>&nbsp;<A=20
      href=3D"http://sql-ex.ru/help/select20.php">20</A>&nbsp; =
<!--Rambler Top100-->
      <DIV style=3D"DISPLAY: none">
      <SCRIPT id=3Dtop100Counter =
src=3D"http://cnt.rambler.ru/top100.jcn?718545"=20
      type=3Dtext/javascript>
</SCRIPT>
      <NOSCRIPT><A href=3D"http://top100.rambler.ru/top100/"><IMG =
height=3D63=20
      alt=3D"Rambler's Top100" =
src=3D"http://cnt.rambler.ru/top100.cnt?718545"=20
      width=3D81 border=3D0></A></NOSCRIPT>=20
  </DIV><!--end of Top100--></TD></FORM></TR></TBODY></TABLE><A =
name=3Dstring_fun>
<H1></A>String functions in MS SQL SERVER 2000</H1>
<DIV style=3D"LEFT: 5%; WIDTH: 90%; POSITION: relative">
<P>Below is a full list of the string functions taken from BOL:</P>
<TABLE cellPadding=3D5 align=3Dcenter border=3D0>
  <TBODY>
  <TR>
    <TD bgColor=3D#dddddd><B>ASCII</B></TD>
    <TD bgColor=3D#dddddd><B>NCHAR</B> </TD>
    <TD bgColor=3D#dddddd><B>SOUNDEX</B> </TD></TR>
  <TR>
    <TD bgColor=3D#cccccc><B>CHAR</B></TD>
    <TD bgColor=3D#cccccc><B>PATINDEX</B> </TD>
    <TD bgColor=3D#cccccc><B>SPACE</B> </TD></TR>
  <TR>
    <TD bgColor=3D#dddddd><B>CHARINDEX</B></TD>
    <TD bgColor=3D#dddddd><B>REPLACE</B> </TD>
    <TD bgColor=3D#dddddd><B>STR</B> </TD></TR>
  <TR>
    <TD bgColor=3D#cccccc><B>DIFFERENCE</B></TD>
    <TD bgColor=3D#cccccc><B>QUOTENAME</B> </TD>
    <TD bgColor=3D#cccccc><B>STUFF</B> </TD></TR>
  <TR>
    <TD bgColor=3D#dddddd><B>LEFT</B></TD>
    <TD bgColor=3D#dddddd><B>REPLICATE</B> </TD>
    <TD bgColor=3D#dddddd><B>SUBSTRING</B> </TD></TR>
  <TR>
    <TD bgColor=3D#cccccc><B>LEN</B></TD>
    <TD bgColor=3D#cccccc><B>REVERSE</B> </TD>
    <TD bgColor=3D#cccccc><B>UNICODE</B> </TD></TR>
  <TR>
    <TD bgColor=3D#dddddd><B>LOWER</B></TD>
    <TD bgColor=3D#dddddd><B>RIGHT</B> </TD>
    <TD bgColor=3D#dddddd><B>UPPER</B> </TD></TR>
  <TR>
    <TD bgColor=3D#cccccc><B>LTRIM</B></TD>
    <TD bgColor=3D#cccccc><B>RTRIM</B> </TD>
    <TD bgColor=3D#cccccc></TD></TR></TBODY></TABLE>
<P>Let's start from two reciprocally related functions - <B>ASCII</B> =
and=20
<B>CHAR</B>.</P>
<P>The ASCII function returns an ASCII code value of the leftmost =
character of a=20
character expression, being a function argument.</P>
<P>Here is an example of the way to determine how many different letters =
which=20
the names of the ships in the Ships table start from are:</P>
<TABLE cellPadding=3D5 border=3D0>
  <TBODY>
  <TR>
    <TD bgColor=3D#d3dce3>SELECT COUNT(DISTINCT ASCII(name)) FROM Ships=20
  </TD></TR></TBODY></TABLE><BR>
<P>Result is 11. To find out what these letters are, we can use CHAR =
function=20
that returns a character by a known ASCII code value (from 0 to =
255):</P>
<TABLE cellPadding=3D5 border=3D0>
  <TBODY>
  <TR>
    <TD bgColor=3D#d3dce3>SELECT DISTINCT CHAR(ASCII(name)) FROM Ships =
ORDER BY=20
    1</TD></TR></TBODY></TABLE><BR>
<P>We should note that the identical result can be got simpler using one =
more=20
function - <B>LEFT</B> that has the following syntax:</P>
<P><B>LEFT (<I>character_expression </I>, <I>integer_expression</I> =
)</B> </P>
<P>and returns the part of a character string starting at a specified =
number of=20
characters from the left. So,</P>
<TABLE cellPadding=3D5 border=3D0>
  <TBODY>
  <TR>
    <TD bgColor=3D#d3dce3>SELECT DISTINCT LEFT(name, 1) FROM Ships ORDER =
BY 1=20
  </TD></TR></TBODY></TABLE><BR>
<P>And this is the way to get the table of codes of all alphabetical=20
characters:</P>
<TABLE cellPadding=3D5 border=3D0>
  <TBODY>
  <TR>
    <TD bgColor=3D#d3dce3>SELECT CHAR(ASCII('a')+ num-1) letter, =
ASCII('a')+ num=20
      - 1 [code]<BR>FROM (SELECT 5*5*(a-1)+5*(b-1) + c AS num=20
      =
<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;FROM=20
      (SELECT 1 a UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT =
4 UNION=20
      ALL SELECT 5)=20
      =
x<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;=20
      CROSS=20
      =
JOIN<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=20
      (SELECT 1 b UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT =
4 UNION=20
      ALL SELECT 5)=20
      =
y<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;=20
      CROSS=20
      =
JOIN<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=20
      (SELECT 1 c UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT =
4 UNION=20
      ALL SELECT 5)=20
      z<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) =

      x<BR>WHERE ASCII('a')+ num -1 BETWEEN ASCII('a') AND ASCII('z')=20
  </TD></TR></TBODY></TABLE><BR>
<P>For those who are unaware of generating of numerical sequence I refer =
to the=20
corresponding <NOINDEX><A=20
href=3D"http://sqlbooks.ru/readarticle.aspx?part=3D09&amp;file=3Daddition=
02&amp;sm=3Did9_1"=20
target=3D_blank>article</A> </NOINDEX>. </P>
<P>It is known that code values of lowercase letters and capital letters =
differ.=20
That's why in order to get the whole set without rewriting above query; =
it will=20
be enough to write up the identical code to aforesaid:</P>
<TABLE cellPadding=3D5 border=3D0>
  <TBODY>
  <TR>
    <TD bgColor=3D#d3dce3>UNION<BR>SELECT CHAR(ASCII('A')+ num-1) =
letter,=20
      ASCII('A')+ num - 1 [code]<BR>FROM (SELECT 5*5*(a-1)+5*(b-1) + c =
AS=20
      =
num<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;FROM=20
      (SELECT 1 a UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT =
4 UNION=20
      ALL SELECT 5)=20
      =
x<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;=20
      CROSS=20
      =
JOIN<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=20
      (SELECT 1 b UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT =
4 UNION=20
      ALL SELECT 5) y=20
      =
<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;=20
      CROSS=20
      =
JOIN<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=20
      (SELECT 1 c UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT =
4 UNION=20
      ALL SELECT 5) z=20
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) =
x=20
      <BR>WHERE ASCII('A')+ num -1 BETWEEN ASCII('A') AND=20
  ASCII('Z')<BR></TD></TR></TBODY></TABLE><BR>
<P>Now let's consider the task of searching a substring in a string =
expression.=20
The two functions can be used for this: <B>CHARINDEX</B> and =
<B>PATINDEX</B>.=20
They both return a starting position (a position of the first character =
of a=20
substring) of a substring in a character string. The function CHARINDEX =
has the=20
following syntax:</P>
<P><B>CHARINDEX (<I>string_expression</I>, <I>target_expression </I>[,=20
<I>start_location </I>])</B></P>
<P>Here an optional integer parameter <I>start_location</I> defines a =
position=20
in a <I>string_expression</I>, where searching a =
<I>target_expression</I> starts=20
from. If this argument is omitted, a searching starts from the beginning =
of a=20
<I>string_expression</I>. For example, the query</P>
<TABLE cellPadding=3D5 border=3D0>
  <TBODY>
  <TR>
    <TD bgColor=3D#d3dce3>SELECT name FROM Ships WHERE CHARINDEX('sh', =
name)=20
      &gt; 0</TD></TR></TBODY></TABLE><BR>
<P>will output the ships that has the sequence of characters "sh" in its =
names.=20
Here we use the fact that if a substring to be found is not found, the =
function=20
CHARINDEX returns 0. The result of executing the query will contain the=20
following ships:</P>
<TABLE cellPadding=3D5 align=3Dcenter border=3D0>
  <TBODY>
  <TR>
    <TD align=3Dmiddle bgColor=3D#d3dce3><B>name</B></TD></TR>
  <TR>
    <TD bgColor=3D#dddddd>Kirishima</TD></TR>
  <TR>
    <TD bgColor=3D#cccccc>Musashi</TD></TR>
  <TR>
    <TD bgColor=3D#dddddd>Washington</TD></TR></TBODY></TABLE>
<P>We should note that if a <I>target_expression </I>or =
<I>string_expression</I>=20
is NULL, the result of the function is also NULL.</P>
<P>The next example determines the positions of the first and second =
occurrences=20
of the character "a" in the name of the ship "California"</P>
<TABLE cellPadding=3D5 border=3D0>
  <TBODY>
  <TR>
    <TD bgColor=3D#d3dce3>SELECT CHARINDEX('a',name)=20
      =
first_a,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; =

      CHARINDEX('a', name, CHARINDEX('a', name)+1) second_a <BR>FROM =
Ships WHERE=20
      name=3D'California' </TD></TR></TBODY></TABLE><BR>
<P>Pay attention that in determining of the second occurrence the =
starting=20
position, used in function, is the position of a character next to the =
first "a"=20
- CHARINDEX('a', name)+1. The propriety of the result - 2 and 10 - can =
be easily=20
checked.</P>
<P>The function PATINDEX has the following syntax:</P>
<P><B>PATINDEX ('%<I>pattern</I>%' , <I>string_expression</I>)</B> </P>
<P>The main distinction of this function from CHARINDEX is that a search =
string=20
may contain wildcard characters - % and _. Leading and ending characters =
"%" are=20
required. For, example, usage of this function in the first example will =
look=20
like</P>
<TABLE cellPadding=3D5 border=3D0>
  <TBODY>
  <TR>
    <TD bgColor=3D#d3dce3>SELECT name FROM Ships WHERE PATINDEX('%sh%', =
name)=20
      &gt; 0 </TD></TR></TBODY></TABLE><BR>
<P>And there's the way to find the names of the ships that contain the =
sequence=20
of three characters, first and last of which is "e":</P>
<TABLE cellPadding=3D5 border=3D0>
  <TBODY>
  <TR>
    <TD bgColor=3D#d3dce3>SELECT name FROM Ships WHERE PATINDEX('%e_e%', =
name)=20
      &gt;0</TD></TR></TBODY></TABLE><BR>
<P>The result of executing of this query looks like this:</P>
<TABLE cellPadding=3D5 align=3Dcenter border=3D0>
  <TBODY>
  <TR>
    <TD align=3Dmiddle bgColor=3D#d3dce3><B>name</B></TD></TR>
  <TR>
    <TD bgColor=3D#dddddd>Revenge</TD></TR>
  <TR>
    <TD bgColor=3D#cccccc>Royal Sovereign</TD></TR></TBODY></TABLE>
<P>The function <B>RIGHT</B> that complements <B>LEFT</B> returns a =
specified=20
number of characters from the right of a character expression:</P>
<P><B>RIGHT(<I>character_expression </I>, <I>integer_expression =
</I>)</B> </P>
<P>Here is, for example, the way to determine the names of the ships =
that start=20
and end with the same letter:</P>
<TABLE cellPadding=3D5 border=3D0>
  <TBODY>
  <TR>
    <TD bgColor=3D#d3dce3>SELECT name FROM Ships WHERE LEFT(name, 1) =3D =

      RIGHT(name, 1) </TD></TR></TBODY></TABLE><BR>
<P>The thing that we got an empty resulting set means that such ships =
are absent=20
in our database. Let's take a combination - a class and a name of a =
ship.</P>
<P>The combining of two string values into one is called =
<B>concatenation</B>,=20
and in the <B>SQL Server</B> sign "+" is used for this operation ("||" =
in=20
standard). So,</P>
<TABLE cellPadding=3D5 border=3D0>
  <TBODY>
  <TR>
    <TD bgColor=3D#d3dce3>SELECT * FROM=20
      =
(<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;SELECT=20
      class +' '+ name AS cn FROM=20
      =
Ships<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;=20
      ) x <BR>WHERE LEFT(cn, 1)=3DRIGHT(cn, 1) =
</TD></TR></TBODY></TABLE><BR>
<P>Here we separate by space the class and the name of a ship. Besides, =
in order=20
not to repeat the whole construction in the function argument, we use a=20
subquery. The result will look like this: </P>
<TABLE cellPadding=3D5 align=3Dcenter border=3D0>
  <TBODY>
  <TR>
    <TD align=3Dmiddle bgColor=3D#d3dce3><B>cn</B></TD></TR>
  <TR>
    <TD bgColor=3D#dddddd>Iowa Missouri </TD></TR>
  <TR>
    <TD bgColor=3D#cccccc>North Carolina =
Washington</TD></TR></TBODY></TABLE>
<P>And what if a string expression will contain only one character? The =
query=20
will output it. You can easily check it by writing</P>
<TABLE cellPadding=3D5 border=3D0>
  <TBODY>
  <TR>
    <TD bgColor=3D#d3dce3>SELECT * FROM (=20
      =
<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;SELECT=20
      class +' '+ name AS cn FROM=20
      =
Ships<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;UNION=20
      ALL=20
      =
<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;SELECT=20
      'a' as=20
      =
nc<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;=20
      ) x <BR>WHERE LEFT(cn, 1)=3DRIGHT(cn, 1) =
</TD></TR></TBODY></TABLE><BR>
<P>In order to exclude this case, one more useful function=20
<B>LEN(<I>string_expression</I>)</B> can be used. It returns the number =
of=20
characters in a string. Let's bound by the case, when the number of =
characters=20
is greater than one:</P>
<TABLE cellPadding=3D5 border=3D0>
  <TBODY>
  <TR>
    <TD bgColor=3D#d3dce3>SELECT * FROM (=20
      =
<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;SELECT=20
      class +' '+ name AS cn FROM=20
      =
Ships<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;UNION=20
      ALL=20
      =
<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;SELECT=20
      'a' as=20
      =
nc<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;=20
      ) x <BR>WHERE LEFT(cn, 1)=3DRIGHT(cn, 1) AND LEN(cn)&gt;1=20
</TD></TR></TBODY></TABLE><BR>
<P>Realization of this function in MS SQL Server has a feature, namely, =
<A=20
name=3Dlen>LEN()</A> function does not take into account the trailing=20
spaces.<BR>Really, let's run the following code:<BR><BR>
<TABLE cellPadding=3D5 border=3D0>
  <TBODY>
  <TR>
    <TD bgColor=3D#d3dce3>DECLARE @chr AS CHAR(12), @vchr AS=20
      VARCHAR(12)<BR><BR>SELECT @chr =3D 'abcde' + REPLICATE(' ', 5), =
@vchr =3D=20
      'abcde'+REPLICATE(' ', 5)<BR><BR>SELECT LEN(@chr), =
LEN(@vchr)<BR>SELECT=20
      DATALENGTH(@chr), DATALENGTH(@vchr) </TD></TR></TBODY></TABLE><BR>
<TABLE cellPadding=3D5 align=3Dcenter border=3D0>
  <TBODY>
  <TR>
    <TD bgColor=3D#dddddd>5</TD>
    <TD bgColor=3D#dddddd>5</TD></TR>
  <TR>
    <TD bgColor=3D#dddddd>12</TD>
    <TD =
bgColor=3D#dddddd>10</TD></TR></TBODY></TABLE><BR><B>REPLICATE</B> =
function=20
adds five blanks to the right from the constant 'abcde', which are not =
taken=20
into account by <B>LEN</B> function, - in both cases we obtain=20
5.<BR><B>DATALENGTH</B> function returns number of bytes in a string=20
representation and demonstrates us difference between CHAR and VARCHAR =
data=20
types. <B>DATALENGTH</B> returns 12 for CHAR data type, and 10 - for=20
VARCHAR.<BR>As one would expect, <B>DATALENGTH</B> for a variable of =
VARCHAR=20
data type has returned actual length of a variable. But why for a =
variable of=20
CHAR data type the result became equal 12? The matter is that CHAR is a =
data=20
type of the fixed length. If value of a variable is less than its =
length, and we=20
have declared length as CHAR (12), value of a variable will be "leveled" =
till=20
the declared length by the addition of trailing blanks. </P>
<P>There are tasks on the website that require to normalize (find =
maximum etc.)=20
in a numerical order a values represented in a string format, for =
example, a=20
seat number in a plane ("2d") or a speed of CD ("24x"). The problem lies =
in a=20
fact that the text sorts like this (ascending)</P>
<TABLE cellPadding=3D5 align=3Dcenter border=3D0>
  <TBODY>
  <TR>
    <TD align=3Dmiddle bgColor=3D#cccccc>11a</TD></TR>
  <TR>
    <TD bgColor=3D#dddddd>1a </TD></TR>
  <TR>
    <TD bgColor=3D#cccccc>2a</TD></TR></TBODY></TABLE>
<P>Indeed,</P>
<TABLE cellPadding=3D5 border=3D0>
  <TBODY>
  <TR>
    <TD bgColor=3D#d3dce3>SELECT '1a' AS place <BR>UNION ALL SELECT '2a' =

      <BR>UNION ALL SELECT '11a'<BR>ORDER BY 1 =
</TD></TR></TBODY></TABLE><BR>
<P>If the sorting of places in order of rows increase is required, the =
order=20
must be like this:</P>
<TABLE cellPadding=3D5 align=3Dcenter border=3D0>
  <TBODY>
  <TR>
    <TD align=3Dmiddle bgColor=3D#cccccc>1a</TD></TR>
  <TR>
    <TD bgColor=3D#dddddd>2a </TD></TR>
  <TR>
    <TD bgColor=3D#cccccc>11a</TD></TR></TBODY></TABLE>
<P>In order to get such an order, the sorting by a numeric values in =
text is=20
needed. I offer the following algorithm:<BR>1. Extract a number from the =

string.<BR>2. Convert it to a numeric format. <BR>3. Perform a sorting =
by a=20
converted value.</P>
<P>As we know that there's only one letter in the string, and to extract =
a=20
number we can use the following construction that doesn't depend on a =
number of=20
numerals in a seat number: </P>
<TABLE cellPadding=3D5 border=3D0>
  <TBODY>
  <TR>
    <TD bgColor=3D#d3dce3>LEFT(place, LEN(place)-1) =
</TD></TR></TBODY></TABLE><BR>
<P>If we just bound by this, we'll get</P>
<TABLE cellPadding=3D5 align=3Dcenter border=3D0>
  <TBODY>
  <TR>
    <TD align=3Dmiddle bgColor=3D#d3dce3><B>place</B></TD></TR>
  <TR>
    <TD bgColor=3D#dddddd>1a </TD></TR>
  <TR>
    <TD bgColor=3D#cccccc>11a</TD></TR>
  <TR>
    <TD bgColor=3D#cccccc>2a</TD></TR></TBODY></TABLE>
<P>Converting to a numeric format may look like the following:</P>
<TABLE cellPadding=3D5 border=3D0>
  <TBODY>
  <TR>
    <TD bgColor=3D#d3dce3>CAST (LEFT(place, LEN(place)-1) AS INT)=20
</TD></TR></TBODY></TABLE><BR>
<P>Now we should just perform a sorting</P>
<TABLE cellPadding=3D5 border=3D0>
  <TBODY>
  <TR>
    <TD bgColor=3D#d3dce3>SELECT * FROM=20
      =
(<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;SELECT=20
      '1a' AS place=20
      =
<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;UNION=20
      ALL SELECT '2a'=20
      =
<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;UNION=20
      ALL SELECT=20
      =
'11a'<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;)=20
      x <BR>ORDER BY CAST(LEFT(place, LEN(place)-1) AS INT)=20
</TD></TR></TBODY></TABLE><BR>
<P>As required to proof.</P>
<P>Previously we used the LEFT function to extract a number from a =
string=20
expression, because we knew a priori how many characters should be =
removed from=20
the right (one). And what if we should extract a string from a substring =
not by=20
the known position of a character, but by a character itself? For =
example,=20
extract all the characters before the first letter "x" (a value of CD=20
speed).</P>
<P>In this case we can also use the previously considered CHARINDEX =
function=20
that allows us to determine the unknown position of the character:</P>
<TABLE cellPadding=3D5 border=3D0>
  <TBODY>
  <TR>
    <TD bgColor=3D#d3dce3>SELECT model, LEFT(cd, CHARINDEX('x', cd) -1) =
FROM PC=20
    </TD></TR></TBODY></TABLE><BR>
<H2>SUBSTRING function</H2>
<P><B>SUBSTRING (<I>expression </I>, <I>start </I>, <I>length </I>) =
</B></P>
<P>This function allows us to extract from an expression its part of a =
specified=20
length, starting from a specified initial position. Expression may be a=20
character or a binary string, and also can have a text or image type. =
For=20
example, if we need to get 3 characters in a ship name, starting from =
the=20
2<SUP>nd</SUP> character, then it's not quite easy to do it without the=20
SUBSTRING function. And so we write:</P>
<TABLE cellPadding=3D5 border=3D0>
  <TBODY>
  <TR>
    <TD bgColor=3D#d3dce3>SELECT name, SUBSTRING(name, 2, 3) FROM Ships=20
  </TD></TR></TBODY></TABLE><BR>
<P>In case we need to extract all the characters, starting from the =
certain, we=20
also can use this function. For example,</P>
<TABLE cellPadding=3D5 border=3D0>
  <TBODY>
  <TR>
    <TD bgColor=3D#d3dce3>SELECT name, SUBSTRING(name, 2, LEN(name)) =
FROM Ships=20
    </TD></TR></TBODY></TABLE><BR>
<P>will give us all the characters in the names of the ships, starting =
from the=20
second letter in the name. Pay attention that in order to specify the =
number of=20
characters to extract I used the LEN(name) function that returns a =
number of=20
characters in the name. It's clearly that forasmuch as I need the =
characters,=20
starting from the second, its number will be less than the whole number =
of the=20
characters in the name. But it doesn't cause an error, because if a =
specified=20
number of characters exceed a permissible number, all the characters =
until the=20
end of a string will be extracted. That is why I take it with a reserve =
sparing=20
myself the calculations.</P>
<H2>REVERSE function</H2>
<P>This function reverses a string, just like reading it from the right =
to left.=20
That is the result of the query </P>
<TABLE cellPadding=3D5 border=3D0>
  <TBODY>
  <TR>
    <TD bgColor=3D#d3dce3>SELECT REVERSE('abcdef') =
</TD></TR></TBODY></TABLE><BR>
<P>will be 'fedcba'. In case of the absence of the RIGHT function in the =

language the query</P>
<TABLE cellPadding=3D5 border=3D0>
  <TBODY>
  <TR>
    <TD bgColor=3D#d3dce3>SELECT RIGHT('abcdef',3) =
</TD></TR></TBODY></TABLE><BR>
<P>can be equally replaced with the query</P>
<TABLE cellPadding=3D5 border=3D0>
  <TBODY>
  <TR>
    <TD bgColor=3D#d3dce3>SELECT REVERSE(LEFT(REVERSE('abcdef'),3))=20
  </TD></TR></TBODY></TABLE><BR>
<P>I see the profit of this function in the following. Let we need to =
determine=20
a position not the first, but the last occurrence of any character (or a =

sequence of characters) in a character string. Let's remind an example, =
where we=20
were determining the position of the first character "a" in the name of =
the ship=20
"California":</P>
<TABLE cellPadding=3D5 border=3D0>
  <TBODY>
  <TR>
    <TD bgColor=3D#d3dce3>SELECT CHARINDEX('a', name) first_a<BR>FROM =
Ships=20
      WHERE name=3D'California' </TD></TR></TBODY></TABLE><BR>
<P>Now let's determine the position of the last occurrence of the =
character "a"=20
in this name. The function </P>
<TABLE cellPadding=3D5 border=3D0>
  <TBODY>
  <TR>
    <TD bgColor=3D#d3dce3>CHARINDEX('a', REVERSE(name)) =
</TD></TR></TBODY></TABLE><BR>
<P>will allow us to find this position, but from the right. In order to =
get the=20
position of this character, but from the left, it's enough to write</P>
<TABLE cellPadding=3D5 border=3D0>
  <TBODY>
  <TR>
    <TD bgColor=3D#d3dce3>SELECT LEN(name) + 1 - CHARINDEX('a', =
REVERSE(name))=20
      first_a <BR>FROM Ships WHERE name=3D'California' =
</TD></TR></TBODY></TABLE><BR>
<H2>REPLACE function</H2>
<P><B>REPLACE (<I>string_expression1</I> , <I>string_expression2</I> ,=20
<I>string_expression3</I> )</B></P>
<P>This function replaces in the <I>string_expression1</I> all the =
occurrences=20
of the <I>string_expression2</I> with the <I>string_expression3</I>. =
This=20
function is absolutely helpful in <B>UPDATE</B> operators, if we should =
change=20
the content of the column. For example, let we are needed to replace all =
the=20
spaces with the hyphen in the names of the ships. Then we can write</P>
<TABLE cellPadding=3D5 border=3D0>
  <TBODY>
  <TR>
    <TD bgColor=3D#d3dce3>UPDATE Ships <BR>SET name =3D REPLACE(name, ' =
', '-')=20
  </TD></TR></TBODY></TABLE><BR>
<P>(This example you can perform on the page with the <A=20
href=3D"http://www.sql-ex.ru/dmlexercises.php">DML</A> exercises, where =
the=20
questions on updating the data are admitted)</P>
<P>However this function can also find its appliance in more non-trivial =
cases.=20
Let's determine how many times the letter "a" is used in a name of a =
ship. The=20
idea is quite easy: let's replace every searching letter with any two=20
characters, and after that we'll calculate the difference of lengths of =
the=20
string we got and the source string. So,</P>
<TABLE cellPadding=3D5 border=3D0>
  <TBODY>
  <TR>
    <TD bgColor=3D#d3dce3>SELECT name, LEN(REPLACE(name, 'a', 'aa')) - =
LEN(name)=20
      FROM Ships </TD></TR></TBODY></TABLE><BR>
<P>And what if we need to determine the number of occurrences of a =
random=20
sequence of characters that, say, we get as a parameter of a stored =
procedure?=20
In this case we should complement the used above algorithm with the =
division on=20
a number of a characters in a sequence:</P>
<TABLE cellPadding=3D5 border=3D0>
  <TBODY>
  <TR>
    <TD bgColor=3D#d3dce3>DECLARE @str AS VARCHAR(100) <BR>SET =
@str=3D'ma'=20
      <BR>SELECT name, (LEN(REPLACE(name, @str, @str + @str)) -=20
      LEN(name))/LEN(@str) FROM Ships </TD></TR></TBODY></TABLE><BR>
<P>Here in order to double the number of searching characters the =
concatenation=20
@str+@str was applied. However for this effect we can use one more =
function -=20
<B>REPLICATE</B> that repeats the first argument so many times as it =
specified=20
by the second argument. </P>
<TABLE cellPadding=3D5 border=3D0>
  <TBODY>
  <TR>
    <TD bgColor=3D#d3dce3>SELECT name, (LEN(REPLACE(name, @str, =
REPLICATE(@str,=20
      2))) - LEN(name))/LEN(@str) FROM Ships =
</TD></TR></TBODY></TABLE><BR>
<P>That is we repeat twice the substring stored in the variable @str =
.</P>
<P>If we need to replace in a string not a certain sequence of =
characters, but a=20
specified number of characters, starting from some position, it's =
simpler to use=20
the <B>STUFF</B> function:</P>
<P><B>STUFF (<I>character_expression1 </I>, <I>start </I>, <I>length =
</I>,=20
<I>character_expression2 </I>)</B> </P>
<P>This function replaces a substring with length of <I>length</I> that =
starts=20
from the <I>start</I> position in the <I>character_expression1</I> with =
the=20
<I>character_expression2</I>.</P>
<P><B>The example</B>. Change the name of a ship: append "_" =
(underscore) and a=20
launching year after the first 5 characters. If there is less than 5 =
characters=20
in the name, complement it with the spaces. </P>
<P>This task can be solved with many different functions. We'll try to =
do it=20
with the STUFF function. In the first approach we'll write (bounding =
with the=20
select query):</P>
<TABLE cellPadding=3D5 border=3D0>
  <TBODY>
  <TR>
    <TD bgColor=3D#d3dce3>SELECT name, STUFF(name, 6, LEN(name), =
'_'+launched)=20
      FROM Ships </TD></TR></TBODY></TABLE><BR>
<P>I use LEN(name) as the third argument (number of characters to =
replace),=20
because I should replace all the characters until the end of the string, =
and=20
that's why I take it with a reserve - the original number of characters =
in the=20
name. But this query will still return an error. And the question is not =
in the=20
third argument, but in the forth, where the concatenation of the string =
constant=20
and the integer column is performing. This is the type conversion error. =
In=20
order to convert a number to its string representation we may use one =
more=20
built-in function - <B>STR</B>:</P>
<P><B>STR ( <I>float_expression</I> [ , <I>length</I> [ , <I>decimal</I> =
&gt; ]=20
] )</B></P>
<P>Under this conversion the round-up is being worked, and a =
<I>length</I>=20
specifies a length of the resulting string. For example,</P>
<TABLE cellPadding=3D5 align=3Dcenter border=3D0>
  <TBODY>
  <TR>
    <TD bgColor=3D#dddddd>STR(3.3456, 5, 1) </TD>
    <TD bgColor=3D#dddddd>&nbsp;&nbsp;&nbsp;&nbsp;3.3 </TD></TR>
  <TR>
    <TD bgColor=3D#cccccc>STR(3.3456, 5, 2)</TD>
    <TD bgColor=3D#cccccc>&nbsp;&nbsp;3.35 </TD></TR>
  <TR>
    <TD bgColor=3D#dddddd>STR(3.3456, 5, 3) </TD>
    <TD bgColor=3D#dddddd>3.346 </TD></TR>
  <TR>
    <TD bgColor=3D#cccccc>STR(3.3456, 5, 4)</TD>
    <TD bgColor=3D#cccccc>3.346 </TD></TR></TBODY></TABLE>
<P>Take note, that if have got string view of the number is less than =
the=20
specified length, the leading spaces are added. If the result is greater =
than=20
the specified length, the fractional part is being truncated (with the=20
round-up); in case there is an integer value we get the corresponding =
number of=20
the asterisks "*".</P>
<TABLE cellPadding=3D5 align=3Dcenter border=3D0>
  <TBODY>
  <TR>
    <TD bgColor=3D#cccccc>STR(12345,4,0) </TD>
    <TD bgColor=3D#cccccc>****</TD></TR></TBODY></TABLE>
<P>By the way, default length is 10 symbols. Keeping in mind that a year =
is=20
represented by four numbers, we will write</P>
<TABLE cellPadding=3D5 border=3D0>
  <TBODY>
  <TR>
    <TD bgColor=3D#d3dce3>SELECT name, STUFF(name, 6, LEN(name),=20
      '_'+STR(launched, 4)) FROM Ships </TD></TR></TBODY></TABLE><BR>
<P>Everything is almost right. The case is rested to consider, when the =
number=20
of symbols in the name is less than 6, as in this case the function =
STUFF gives=20
NULL. Well, we will have to be on the rack to the end, which is =
connected with=20
using this function in this example, on the way applying one more string =

function. We'll add the trailing blanks for the name`s length being =
knowingly=20
more than 6. There is a special <B>SPACE</B> function for that </P>
<P><B>SPACE(<I>number_of_blanks</I>)</B>: </P>
<TABLE cellPadding=3D5 border=3D0>
  <TBODY>
  <TR>
    <TD bgColor=3D#d3dce3>SELECT name, STUFF(name + SPACE(6), 6, =
LEN(name),=20
      '_'+STR(launched,4)) FROM Ships </TD></TR></TBODY></TABLE><BR>
<H2>LTRIM and RTRIM functions </H2>
<P><B>LTRIM (<I>character_expression </I>) </B></P>
<P><B>RTRIM (<I>character_expression </I>) </B></P>
<P>cut accordingly the leading and trailing blanks of the string =
expression,=20
which is being converted by default to the <B>VARCHAR</B> type.</P>
<P>Let us need to build such a string: <I>passenger`s name_passenger`s=20
identifier</I> for every record from the Passenger table. If we =
write</P>
<TABLE cellPadding=3D5 border=3D0>
  <TBODY>
  <TR>
    <TD bgColor=3D#d3dce3>SELECT name + '_' + CAST(id_psg AS VARCHAR) =
FROM=20
      Passenger, </TD></TR></TBODY></TABLE><BR>
<P>we will get in the result something like: </P>
<P>A&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=20
_1</P>
<P>It is connected with the fact that the column name has the type=20
<B>CHAR</B>(30). The short string is added with the blanks for this type =
to the=20
specified dimension (we have 30 symbols). The function RTRIM will help =
us=20
here:</P>
<TABLE cellPadding=3D5 border=3D0>
  <TBODY>
  <TR>
    <TD bgColor=3D#d3dce3>SELECT RTRIM(name) + '_' + CAST(id_psg AS =
VARCHAR)=20
      FROM Passenger </TD></TR></TBODY></TABLE><BR>
<H2>LOWER and UPPER functions </H2>
<P><B>LOWER(<I>character_expression </I>)</B> </P>
<P><B>UPPER(<I>character_expression </I>)</B> </P>
<P>convert all the characters of the argument accordingly to the lower =
and upper=20
register. These functions turn out to be useful in comparison with the=20
registerdepended strings.</P>
<P>A pair of the interesting functions <B>SOUNDEX</B> and =
<B>DIFFERENCE</B> </P>
<P><B>SOUNDEX(<I>character_expression </I>)</B></P>
<P><B>DIFFERENCE (<I>character_expression _1</I>,=20
<I>character_expression_2</I>)</P></B>
<P>allow us to determine the similar-sounding of words. SOUNDEX returns =
a=20
four-character code to evaluate the similarity, but DIFFERENCE just =
properly=20
evaluates the similarity of two comparing character strings. Being that =
these=20
functions do not support Cyrillic, I refer interested to <B>BOL</B> for =
the=20
examples of its usage.</P>
<P>In conclusion we will adduce some functions and a few examples of the =
Unicode=20
usage: </P>
<H2>UNICODE function</H2>
<P><B>UNICODE (<I>ncharacter_expression </I>)</B> </P>
<P>returns the Unicode value for the first character of the input =
expression.=20
</P>
<H2>NCHAR function</H2>
<P><B>NCHAR (<I>integer</I>) </B></P>
<P>returns a character with the given integer Unicode value. A few =
examples:</P>
<TABLE cellPadding=3D5 border=3D0>
  <TBODY>
  <TR>
    <TD bgColor=3D#d3dce3>SELECT ASCII('=E0'), UNICODE('=E0')=20
</TD></TR></TBODY></TABLE><BR>
<P>Returns the ASCII-code value and the Unicode value of the Russian =
letter "=E0":=20
224 and 1072.</P>
<TABLE cellPadding=3D5 border=3D0>
  <TBODY>
  <TR>
    <TD bgColor=3D#d3dce3>SELECT CHAR(ASCII('=E0')), =
CHAR(UNICODE('=E0'))=20
  </TD></TR></TBODY></TABLE><BR>
<P>We try to recover a symbol by its code value. We get "=E0" and NULL. =
The=20
NULL-value returns because the 1072 code value is absent in the usual =
code=20
table.</P>
<TABLE cellPadding=3D5 border=3D0>
  <TBODY>
  <TR>
    <TD bgColor=3D#d3dce3>SELECT CHAR(ASCII('=E0')), =
NCHAR(UNICODE('=E0'))=20
  </TD></TR></TBODY></TABLE><BR>
<P>Now it's all right, "a" in both cases. Finally,</P>
<TABLE cellPadding=3D5 border=3D0>
  <TBODY>
  <TR>
    <TD bgColor=3D#d3dce3>SELECT NCHAR(ASCII('=E0')) =
</TD></TR></TBODY></TABLE><BR>
<P>will give "a", because the Unicode value 224 exactly corresponds to =
this=20
letter.</P>
<P>Given examples here can be done directly on the website by selecting =
the=20
check box "Without checking" on the page with <A=20
href=3D"http://www.sql-ex.ru/exercises.php">SELECT =
exercises</A>.</P></DIV>
<CENTER><BR><BR><SMALL></SMALL><BR><BR></CENTER>
<P></P><!-- =F0=E0=F1=EA=F0=E0=F1=EA=E0 -->
<SCRIPT type=3Dtext/javascript>
      hljs.initHighlightingOnLoad('sql');
    </SCRIPT>

<CENTER><A href=3D"http://sql-ex.ru/help/select9.php">Previous</A> | <A=20
href=3D"http://sql-ex.ru/help/select0.php">Index</A> | <A=20
href=3D"http://sql-ex.ru/help/select11.php">Next</A><BR><BR>
<SCRIPT type=3Dtext/javascript>
try{ var locat =3D escape(top.location.href); }catch(e){;}
var ref =3D escape(document.referrer);
document.write('<iframe =
src=3D"http://advertbox.us/ngcode.php?ida=3D5129&wb=3D468&hb=3D60&ref=3D'=
 + ref + '&locat=3D' + locat + '" frameborder=3D0 vspace=3D0 hspace=3D0 =
width=3D468 height=3D60 marginwidth=3D0 marginheight=3D0 =
scrolling=3Dno></iframe>')
</SCRIPT>
<!-- =C1=E5=E3=F3=ED--></CENTER><BR>
<TABLE cellSpacing=3D0 cellPadding=3D0 width=3D"98%" align=3Dcenter =
bgColor=3D#cccccc=20
border=3D0 valign=3D"middle">
  <TBODY>
  <TR>
    <TD onmouseover=3D"this.style.backgroundColor=3D'#DDDDDD'"=20
    onmouseout=3D"this.style.backgroundColor=3D'#CCCCCC'" align=3Dmiddle =

      width=3D"15%"><A style=3D"FONT-SIZE: 8pt" =
href=3D"http://sql-ex.ru/">Home</A></TD>
    <TD onmouseover=3D"this.style.backgroundColor=3D'#DDDDDD'"=20
    onmouseout=3D"this.style.backgroundColor=3D'#CCCCCC'" align=3Dmiddle =

      width=3D"15%"><A style=3D"FONT-SIZE: 8pt"=20
      href=3D"http://sql-ex.ru/exercises.php" =
target=3Dexercises><B>SELECT</B>=20
      exercises (rating stages)</A></TD>
    <TD onmouseover=3D"this.style.backgroundColor=3D'#DDDDDD'"=20
    onmouseout=3D"this.style.backgroundColor=3D'#CCCCCC'" align=3Dmiddle =

      width=3D"15%"><A style=3D"FONT-SIZE: 8pt"=20
      href=3D"http://sql-ex.ru/dmlexercises.php" =
target=3Dexercises><B>DML</B>=20
      exercises</A></TD>
    <TD onmouseover=3D"this.style.backgroundColor=3D'#DDDDDD'"=20
    onmouseout=3D"this.style.backgroundColor=3D'#CCCCCC'" align=3Dmiddle =

      width=3D"15%"><A style=3D"FONT-SIZE: 8pt"=20
      href=3D"http://sql-ex.ru/developers.php">Developers</A></TD>
    <TD align=3Dright><!--begin of Top100 logo--><A=20
      href=3D"http://top100.rambler.ru/top100/"><IMG height=3D31=20
      alt=3D"Rambler's Top100"=20
      =
src=3D"http://top100-images.rambler.ru/top100/banner-88x31-rambler-gray2.=
gif"=20
      width=3D88 border=3D0></A> <!--end of Top100 logo =
--><!--LiveInternet counter-->
      <SCRIPT language=3DJavaScript><!--
document.write('<a href=3D"http://www.liveinternet.ru/click" '+
'target=3D"_blank"><img src=3D"http://counter.yadro.ru/hit?t16.2;r'+
escape(document.referrer)+((typeof(screen)=3D=3D'undefined')?'':
';s'+screen.width+'*'+screen.height+'*'+(screen.colorDepth?
screen.colorDepth:screen.pixelDepth))+';u'+escape(document.URL)+
';'+Math.random()+'" title=3D"liveinternet.ru: =F7=E8=F1=EB=EE =
=EF=F0=EE=F1=EC=EE=F2=F0=EE=E2 =E8 =EF=EE=F1=E5=F2=E8=F2=E5=EB=E5=E9 =
=E7=E0 =F1=F3=F2=EA=E8 =E8 =E7=E0 =F1=E5=E3=EE=E4=ED=FF" border=3D"0" =
width=3D"88" height=3D"31"></a>')//--></SCRIPT>
<!--/LiveInternet--></TD></TR></TBODY></TABLE></BODY></HTML>

------=_NextPart_000_00AD_01CDE351.E53E8BB0
Content-Type: application/octet-stream
Content-Transfer-Encoding: base64
Content-Location: http://cnt.rambler.ru/top100.cnt?718545

R0lGODdhUQA/APIAAAAAYPj8+MjMyDAwmGBkmMjM+GBkyAAAACwAAAAAUQA/AAAD/gi63P4wyklZ
uDjrzbv/YBgoYmmeaEZ2wuASaVYAQ5EJBGGXriCuG4IjdhECdheBYlCaAUpAzQOJMlKdT5HhCM1q
sC2FoSgs+MgDgWCmCxi3uYCSRj76CAYYYaDwrfEwHFEYcwA4CmYOPnwQBUZGADpLIww1jAsYWH2C
XjILWJQNaRIDbwxGpUsLW5WZC3wdg0mfC5A2tQuFhVZuCpCMBXyWvhu1HrIBoK+YAYzOurhcTs60
ZqFUSZCxnYSYqJeXqNB9y4hLjARhYYYaOLacHKComtQ040+XvnM1Du+eDNguICvUi0QwGtGO0DIY
LhkmTWMYnXFlDB6RGBPjZbxI/omjx48fkIEceVEkyZMnTKJcCUIly5fFKsicSbOmzZs4c+rcybOn
z59AIQhDOBTn0KIA8uzJ5ysYJJ3HcgY5QmXNpyuFcHpgSjNIwFkbKWrt4CyHCwelcgDM+DXTB641
kWS1lgRLGxnobmQoJQNvhqc3J2L5qiTQhjmGk/1NTCUOBsA25SLyQFdOYzpuMfAl9JfJ451InCAp
k/kCn9CR+j5mvPgv6G5cLgSbmLHG6NScCV25kRFyTcHEyKr+nPju4TQdNOGUvGnqcIeYi3huJyQd
p5061tAzw52RjALgIekAv4679gZq1lgNKlMF+/cz3cOfL8E8/fv48+vfz/8968z/IbgEIEwCDshS
gQaihOBLRIXF0YIHfnKSS47kcMYf1tWlnmXgZbKhQLXQVWE6Z3BnQwF5bENZPnr0U5AdFkB2SwM2
cDWjKCrGw1QeEKjVBxapTKEIXIbAleMGQJ5Xy1O2FHKWL77ZsYsjn4CzRlQdiIfBKyCqggiQDKyH
UC5yfFLdDpe0tSU3sEFJD42vgJOmciFmpQYbobATEpsYsLIKnX1kFWaYQDJ1yANPxoblisasI6Ec
TNWYiyYvsgMZDJc46J4IlWmIJHm6baheaB8mA15VnR6ZYIIQrvpRq64+yGesEdJqYH/9JQAAOw==

------=_NextPart_000_00AD_01CDE351.E53E8BB0
Content-Type: image/gif
Content-Transfer-Encoding: base64
Content-Location: http://top100-images.rambler.ru/top100/banner-88x31-rambler-gray2.gif

R0lGODlhWAAfALMAAISEhIuLi5WVlZubm6Ojo6urq7W1tb29vcPDw83NzdPT093d3ePj4+3t7fT0
9P7+/iH5BAAAAAAALAAAAABYAB8AAAT/EMhJq7046833+2AojmRpnmhaSo/hvnAsz3Rt2wUhBFMg
EAXag3UoGo/IpHLJbC4Ng83AkBwCHoisdsvter/gsJfA4wQIXCtWzG67w4QOBa1VJwoARCIB0An2
An+AAAd7e1EAZxUHhHt9jIWMf4EJjAWGe3Fyc4ZqCgoBAwoGAAmBn6cKfACiqgEBCaqVUUaEnwAF
kKAAAgqUrJ/BpJsVBp9qCwukCQEFC4HJ0AtkpArKpcnZeMkIAAZZuN0IBj4Cz4EE2dxlCCKEDw6k
BCDdiQgLyMmhAMlxBQWhkuFa4G3BNnUG+S2oN6GAuAAHBgxYgOieOjwSfiR4QIDAAI4F/x4MmNex
hQRnahio7FZApUGJrBhIihJAJgAFKnOSUskngUpvfAYIYCCR6AA8OFXuotBOQtMrB0gGwCIhgAI1
DRpcW5C1awOJXwW4wOMzkaGspLL2zApUQoKvA+A2CMQgK6MKT59imcfAwdwJB7A2iHPAa9eiebri
asBAkwC0ALIquMnWWJ+sYMEyuNwAI1MreqM+iFohJAsHqFOrXs26tevXsFEj+izhIxWRJC18ZKGi
t2/fZWg7hSePo4WpLIgpX07hA3MMap5Ll+PgQfDpyK9M366hgUgLBRwQJFC9HnmqFHZrp3BgwSjl
94ZJSDYbw8T6N01SCK8VgAMEUzHyX/+AFBgQ3QTtgHCXHPgwdIVxGuTG3gOr9DDRNMa5l5t7FGyU
3ATl4UOQN+NMgAY5ByAgAD8UlvhgHAJkAWMWDkmlhQAfNXDdfBjG0U+GIybi3Ye8EWBgNwyAwEAz
IFQHjzkP4EPhiyHRMw8IZ1gFgo+jWfCjjwpsOJkEgR3Im5QHGPjfBwaI6B1XWOCTQIIfcZRkLA90
9kECmgCQZGc8GMjAihQI5EACHwmIaJe8JGnmgwhctdADmzVoaZxYXAXgB1cS4N0BDDBzZQUTwVPG
VRXy6E15EhjAqlsPXEUkpO1g+MGl92CKQJUfODAVRwku4AADVVawgKOaeMqocoEN9uhYB1lEuWqU
uuKaR3UUvXhtrCVZMQEICwRn4LJylEnKo9yla0GZpnTwxwd3oavuvK16J9OOFED0p3zy0jsvAVfl
mQAUPIRiwFsfhNkcb7817PDDvfkrscQRAAA7

------=_NextPart_000_00AD_01CDE351.E53E8BB0
Content-Type: text/css;
	charset="iso-2022-jp"
Content-Transfer-Encoding: quoted-printable
Content-Location: http://sql-ex.ru/templates/style.css

.input {
	FONT-SIZE: 8pt; FONT-FAMILY: Verdana,Arial,Helvetica,sans-serif
}
.form {
	BORDER-RIGHT: 1px solid; BORDER-TOP: 1px solid; BORDER-LEFT: 1px solid; =
BORDER-BOTTOM: 1px solid; BACKGROUND-COLOR: #fff5f5
}
.base {
	VERTICAL-ALIGN: middle; WIDTH: 100%; HEIGHT: 100%; TEXT-ALIGN: center
}
.question {
	PADDING-RIGHT: 10px; PADDING-LEFT: 10px; PADDING-BOTTOM: 10px; =
VERTICAL-ALIGN: middle; CURSOR: help; PADDING-TOP: 10px; =
BACKGROUND-COLOR: #dddddd; TEXT-ALIGN: justify
}
FO {
	FONT-WEIGHT: bold; FONT-SIZE: 13pt; COLOR: #000000; LINE-HEIGHT: 20px; =
FONT-FAMILY: Arial,Helvetica; TEXT-ALIGN: left; TEXT-DECORATION: none
}
H1 {
	FONT-SIZE: 16pt; FONT-FAMILY: Arial,Helvetica
}
H2 {
	FONT-WEIGHT: bold; FONT-SIZE: 13pt; COLOR: #000000; LINE-HEIGHT: 20px; =
FONT-FAMILY: Arial,Helvetica; TEXT-ALIGN: center; TEXT-DECORATION: none
}
H3 {
	FONT-WEIGHT: bold; FONT-SIZE: 15px; LINE-HEIGHT: 18px; FONT-FAMILY: =
Arial,Helvetica; TEXT-ALIGN: center
}
H4 {
	FONT-WEIGHT: bold; FONT-SIZE: 15px; FONT-FAMILY: Arial,Helvetica; =
TEXT-ALIGN: center
}
P {
	FONT-WEIGHT: normal; FONT-SIZE: 12px; COLOR: black; FONT-FAMILY: =
Verdana,Arial,Helvetica; TEXT-ALIGN: justify; TEXT-DECORATION: none
}
BODY {
	FONT-WEIGHT: normal; FONT-SIZE: 12px; BACKGROUND: #f5f5f5; MARGIN: 4px =
4px 0px; COLOR: black; FONT-FAMILY: Verdana,Arial,Helvetica; TEXT-ALIGN: =
justify; TEXT-DECORATION: none
}
DIV {
	FONT-WEIGHT: normal; FONT-SIZE: 12px; COLOR: black; FONT-FAMILY: =
Verdana,Arial,Helvetica; TEXT-ALIGN: justify; TEXT-DECORATION: none
}
DIV.rat {
	DISPLAY: none; FONT-WEIGHT: normal; FONT-SIZE: 11px; COLOR: #0000ff; =
FONT-FAMILY: Verdana,Arial,Helvetica; POSITION: relative; TEXT-ALIGN: =
left; TEXT-DECORATION: none
}
TABLE {
	FONT-WEIGHT: normal; FONT-SIZE: 12px; COLOR: black; FONT-FAMILY: =
Verdana,Arial,Helvetica; TEXT-ALIGN: justify; TEXT-DECORATION: none
}
.dt TH {
	BACKGROUND-COLOR: #d9e3d8; TEXT-ALIGN: center
}
.st TH {
	BACKGROUND-COLOR: #d3dce3; TEXT-ALIGN: center
}
.dt0 {
	BACKGROUND-COLOR: #cccccc
}
.dt1 {
	BACKGROUND-COLOR: #dddddd
}
.er {
	BACKGROUND-COLOR: #f3d3d3
}
BLOCKQUOTE {
	TEXT-ALIGN: left
}
CITE {
	FONT-WEIGHT: normal; FONT-SIZE: 12px; BACKGROUND: #dddddd; MARGIN: 4px =
4px 0px; COLOR: red; FONT-STYLE: normal; FONT-FAMILY: =
Verdana,Arial,Helvetica; TEXT-ALIGN: justify; TEXT-DECORATION: none
}
I {
	FONT-STYLE: italic
}
I.cmnt {
	FONT-SIZE: 9px; COLOR: gray; FONT-STYLE: italic
}
SUP.newa {
	FONT-SIZE: 11px; COLOR: #de8352
}
A:link {
	FONT-SIZE: 9pt; FONT-FAMILY: Verdana,Arial,Helvetica; TEXT-DECORATION: =
none
}
A:visited {
	FONT-SIZE: 9pt; COLOR: #0000ff; FONT-FAMILY: Verdana,Arial,Helvetica; =
TEXT-DECORATION: none
}
A:hover {
	FONT-SIZE: 9pt; COLOR: #ff0000; FONT-FAMILY: Verdana,Arial,Helvetica; =
TEXT-DECORATION: underline
}
A.noph:link {
	COLOR: #777777
}
A.noph:hover {
	COLOR: gray; TEXT-DECORATION: underline
}
A.noph:visited {
	COLOR: gray
}
A.ph:link {
	COLOR: black
}
A.ph:hover {
	COLOR: black; TEXT-DECORATION: underline
}
A.ph:visited {
	COLOR: black
}
A.none:link {
	COLOR: black; TEXT-DECORATION: none
}
A.none:visited {
	COLOR: black; TEXT-DECORATION: none
}
A.none:hover {
	COLOR: black; TEXT-DECORATION: none
}
A.top10:link {
	FONT-SIZE: 9pt; COLOR: black; FONT-FAMILY: Verdana,Arial,Helvetica; =
TEXT-DECORATION: none
}
A.top10:visited {
	FONT-SIZE: 9pt; COLOR: black; FONT-FAMILY: Verdana,Arial,Helvetica
}
A.top10:hover {
	FONT-WEIGHT: bold; FONT-SIZE: 9pt; COLOR: black; FONT-FAMILY: =
Verdana,Arial,Helvetica; TEXT-DECORATION: underline
}
LI {
	FONT-SIZE: 12px; LINE-HEIGHT: 13px; FONT-FAMILY: =
Tahoma,Arial,Helvetica; LIST-STYLE-TYPE: square; TEXT-ALIGN: left
}
LI.ol {
	FONT-SIZE: 12px; LINE-HEIGHT: 13px; FONT-FAMILY: =
Tahoma,Arial,Helvetica; TEXT-ALIGN: left
}
.quotemain {
	BORDER-RIGHT: #000 1px dotted; PADDING-RIGHT: 4px; BORDER-TOP: #000 1px =
dotted; PADDING-LEFT: 4px; BACKGROUND: #fafcfe; PADDING-BOTTOM: 4px; =
MARGIN: auto; BORDER-LEFT: #8394b2 4px solid; COLOR: purple; =
PADDING-TOP: 4px; BORDER-BOTTOM: #000 1px dotted
}

------=_NextPart_000_00AD_01CDE351.E53E8BB0
Content-Type: text/css;
	charset="iso-2022-jp"
Content-Transfer-Encoding: quoted-printable
Content-Location: http://sql-ex.ru/templates/help.css

H1 {
	FONT-SIZE: 16pt; COLOR: #004040; FONT-FAMILY: Arial,Helvetica; =
TEXT-ALIGN: center
}
H2 {
	FONT-WEIGHT: bold; FONT-SIZE: 13pt; COLOR: #004040; LINE-HEIGHT: 20px; =
FONT-FAMILY: Arial,Helvetica; TEXT-ALIGN: center; TEXT-DECORATION: none
}
.par {
	FONT-SIZE: 13pt; MARGIN-LEFT: 5%; COLOR: #370000; MARGIN-RIGHT: 5%; =
FONT-FAMILY: Arial,Helvetica; TEXT-ALIGN: left
}
.for {
	FONT-SIZE: 13pt; MARGIN-LEFT: 5%; COLOR: #800000; MARGIN-RIGHT: 5%; =
FONT-STYLE: italic; FONT-FAMILY: Arial,Helvetica; TEXT-ALIGN: center
}
DIV.symb {
	BORDER-RIGHT: #004000 1px solid; PADDING-RIGHT: 5px; BORDER-TOP: =
#004000 1px solid; PADDING-LEFT: 5px; FONT-SIZE: 16pt; FLOAT: left; =
PADDING-BOTTOM: 5px; MARGIN: 5px; BORDER-LEFT: #004000 1px solid; COLOR: =
#004000; PADDING-TOP: 5px; BORDER-BOTTOM: #004000 1px solid
}
DIV.symb1 {
	BORDER-RIGHT: #800000 1px solid; PADDING-RIGHT: 5px; BORDER-TOP: =
#800000 1px solid; PADDING-LEFT: 5px; FONT-SIZE: 16pt; FLOAT: left; =
PADDING-BOTTOM: 5px; MARGIN: 5px; BORDER-LEFT: #800000 1px solid; COLOR: =
#800000; PADDING-TOP: 5px; BORDER-BOTTOM: #800000 1px solid
}
DIV.body {
	PADDING-LEFT: 40px; FONT-SIZE: 10pt; MARGIN: 5px; COLOR: #002d2d; =
BORDER-TOP-STYLE: none; BORDER-RIGHT-STYLE: none; BORDER-LEFT-STYLE: =
none; BORDER-BOTTOM-STYLE: none
}
DIV.para {
	BORDER-RIGHT: #004000 1px solid; PADDING-RIGHT: 5px; BORDER-TOP: =
#004000 1px solid; PADDING-LEFT: 5px; FONT-WEIGHT: bold; FONT-SIZE: =
10pt; PADDING-BOTTOM: 5px; MARGIN: 5px; BORDER-LEFT: #004000 1px solid; =
COLOR: #004040; PADDING-TOP: 5px; BORDER-BOTTOM: #004000 1px solid
}
DIV.para1 {
	BORDER-RIGHT: #800000 1px solid; PADDING-RIGHT: 5px; BORDER-TOP: =
#800000 1px solid; PADDING-LEFT: 5px; FONT-WEIGHT: bold; FONT-SIZE: =
10pt; PADDING-BOTTOM: 5px; MARGIN: 5px; BORDER-LEFT: #800000 1px solid; =
COLOR: #004040; PADDING-TOP: 5px; BORDER-BOTTOM: #800000 1px solid
}
DIV.error {
	FONT-WEIGHT: bold; FONT-SIZE: 13pt; COLOR: #b30000; LINE-HEIGHT: 20px; =
FONT-FAMILY: Arial,Helvetica; TEXT-ALIGN: center; TEXT-DECORATION: none
}
A.let:link {
	FONT-SIZE: 10pt; COLOR: #6a0000; FONT-FAMILY: Verdana,Arial,Helvetica; =
TEXT-DECORATION: none
}
A.let:visited {
	FONT-SIZE: 10pt; COLOR: #6a0000; FONT-FAMILY: Verdana,Arial,Helvetica; =
TEXT-DECORATION: none
}
A.let:hover {
	FONT-SIZE: 10pt; COLOR: #003c77; FONT-FAMILY: Verdana,Arial,Helvetica; =
TEXT-DECORATION: none
}
A.menu:link {
	FONT-SIZE: 10px; COLOR: #6a0000; FONT-FAMILY: Verdana,Arial,Helvetica; =
TEXT-DECORATION: none
}
A.menu:link {
	FONT-SIZE: 10px; COLOR: #6a0000; FONT-FAMILY: Verdana,Arial,Helvetica; =
TEXT-DECORATION: none
}
A.menu:visited {
	FONT-SIZE: 10px; COLOR: #6a0000; FONT-FAMILY: Verdana,Arial,Helvetica; =
TEXT-DECORATION: none
}
A.menu:hover {
	FONT-SIZE: 10px; COLOR: #003c77; FONT-FAMILY: Verdana,Arial,Helvetica; =
TEXT-DECORATION: none
}
.menuwa {
	FONT-SIZE: 10px; COLOR: #3e0000; FONT-FAMILY: Verdana,Arial,Helvetica; =
TEXT-DECORATION: none
}

------=_NextPart_000_00AD_01CDE351.E53E8BB0
Content-Type: text/css;
	charset="iso-2022-jp"
Content-Transfer-Encoding: quoted-printable
Content-Location: http://sql-ex.ru/help/styles/default.css

PRE CODE {
	BORDER-RIGHT: #370000 2px solid; PADDING-RIGHT: 10px; BORDER-TOP: =
#370000 2px solid; DISPLAY: block; PADDING-LEFT: 10px; FONT-SIZE: 13pt; =
BACKGROUND: #feffe8; PADDING-BOTTOM: 10px; MARGIN-LEFT: 10%; OVERFLOW: =
auto; BORDER-LEFT: #370000 2px solid; WIDTH: 80%; LINE-HEIGHT: normal; =
PADDING-TOP: 10px; BORDER-BOTTOM: #370000 2px solid
}
.res {
	PADDING-RIGHT: 10px; DISPLAY: block; PADDING-LEFT: 10px; FONT-SIZE: =
13pt; BACKGROUND: none transparent scroll repeat 0% 0%; PADDING-BOTTOM: =
10px; MARGIN-LEFT: 10%; BORDER-TOP-STYLE: none; LINE-HEIGHT: normal; =
PADDING-TOP: 10px; BORDER-RIGHT-STYLE: none; BORDER-LEFT-STYLE: none; =
TEXT-ALIGN: left; BORDER-BOTTOM-STYLE: none; align: center
}
LI {
	FONT-WEIGHT: normal; FONT-SIZE: 12pt; MARGIN-LEFT: 35px; COLOR: =
#512800; BORDER-TOP-STYLE: none; LINE-HEIGHT: 25px; FONT-STYLE: italic; =
BORDER-RIGHT-STYLE: none; BORDER-LEFT-STYLE: none; TEXT-ALIGN: left; =
BORDER-BOTTOM-STYLE: none
}
.keyword {
	COLOR: #00f
}
.comment {
	COLOR: #080
}
.aggregate {
	COLOR: #f0f
}
.string {
	COLOR: #f00
}
.predicate {
	COLOR: #b4b4b4
}

------=_NextPart_000_00AD_01CDE351.E53E8BB0
Content-Type: application/octet-stream
Content-Transfer-Encoding: quoted-printable
Content-Location: http://sql-ex.ru/help/highlight.js

/*
Syntax highlighting with language autodetection.
http://softwaremaniacs.org/soft/highlight/
*/
var hljs =3D new function() {

  var DEFAULT_LANGUAGES =3D ['python', 'ruby', 'perl', 'php', 'css', =
'xml', 'html', 'django', 'javascript', 'java', 'cpp', 'sql', =
'smalltalk', 'ini', 'diff'];
  var ALL_LANGUAGES =3D (DEFAULT_LANGUAGES.join(',') + ',' + ['1c', =
'axapta', 'delphi', 'rib', 'rsl', 'vbscript', 'profile', 'dos', =
'bash'].join(',')).split(',');
  var LANGUAGE_GROUPS =3D {
    'xml': 'www',
    'html': 'www',
    'css': 'www',
    'django': 'www',
    'python': 'dynamic',
    'perl': 'dynamic',
    'php': 'dynamic',
    'ruby': 'dynamic',
    'cpp': 'static',
    'java': 'static',
    'delphi': 'static',
    'rib': 'renderman',
    'rsl': 'renderman'
  }

  var LANGUAGES =3D {}
  var selected_languages =3D {};

  function escape(value) {
    return value.replace(/&/gm, '&amp;').replace(/</gm, =
'&lt;').replace(/>/gm, '&gt;');
  }

  function contains(array, item) {
    if (!array)
      return false;
    for (var key in array)
      if (array[key] =3D=3D item)
        return true;
    return false;
  }

  function highlight(language_name, value) {
    function compileSubModes(mode, language) {
      mode.sub_modes =3D [];
      for (var i in mode.contains) {
        for (var j in language.modes) {
          if (language.modes[j].className =3D=3D mode.contains[i]) {
            mode.sub_modes[mode.sub_modes.length] =3D language.modes[j];
          }
        }
      }
    }

    function subMode(lexem, mode) {
      if (!mode.contains) {
        return null;
      }
      if (!mode.sub_modes) {
        compileSubModes(mode, language);
      }
      for (var i =3D 0; i < mode.sub_modes.length; i++) {
        if (mode.sub_modes[i].beginRe.test(lexem)) {
          return mode.sub_modes[i];
        }
      }
      return null;
    }

    function endOfMode(mode_index, lexem) {
      if (modes[mode_index].end && modes[mode_index].endRe.test(lexem))
        return 1;
      if (modes[mode_index].endsWithParent) {
        var level =3D endOfMode(mode_index - 1, lexem);
        return level ? level + 1 : 0;
      }
      return 0;
    }

    function isIllegal(lexem, mode) {
      return mode.illegalRe && mode.illegalRe.test(lexem);
    }

    function compileTerminators(mode, language) {
      var terminators =3D [];

      function addTerminator(re) {
        if (!contains(terminators, re)) {
          terminators[terminators.length] =3D re;
        }
      }

      if (mode.contains)
        for (var key in language.modes) {
          if (contains(mode.contains, language.modes[key].className)) {
            addTerminator(language.modes[key].begin);
          }
        }

      var index =3D modes.length - 1;
      do {
        if (modes[index].end) {
          addTerminator(modes[index].end);
        }
        index--;
      } while (modes[index + 1].endsWithParent);

      if (mode.illegal) {
        addTerminator(mode.illegal);
      }

      var terminator_re =3D '(' + terminators[0];
      for (var i =3D 0; i < terminators.length; i++)
        terminator_re +=3D '|' + terminators[i];
      terminator_re +=3D ')';
      return langRe(language, terminator_re);
    }

    function eatModeChunk(value, index) {
      var mode =3D modes[modes.length - 1];
      if (!mode.terminators) {
        mode.terminators =3D compileTerminators(mode, language);
      }
      value =3D value.substr(index);
      var match =3D mode.terminators.exec(value);
      if (!match)
        return [value, '', true];
      if (match.index =3D=3D 0)
        return ['', match[0], false];
      else
        return [value.substr(0, match.index), match[0], false];
    }

    function keywordMatch(mode, match) {
      var match_str =3D language.case_insensitive ? =
match[0].toLowerCase() : match[0]
      for (var className in mode.keywordGroups) {
        var value =3D =
mode.keywordGroups[className].hasOwnProperty(match_str);
        if (value)
          return [className, value];
      }
      return false;
    }

    function processKeywords(buffer, mode) {
      if (!mode.keywords || !mode.lexems)
        return escape(buffer);
      if (!mode.lexemsRe) {
        var lexems_re =3D '(' + mode.lexems[0];
        for (var i =3D 1; i < mode.lexems.length; i++)
          lexems_re +=3D '|' + mode.lexems[i];
        lexems_re +=3D ')';
        mode.lexemsRe =3D langRe(language, lexems_re, true);
      }
      var result =3D '';
      var last_index =3D 0;
      mode.lexemsRe.lastIndex =3D 0;
      var match =3D mode.lexemsRe.exec(buffer);
      while (match) {
        result +=3D escape(buffer.substr(last_index, match.index - =
last_index));
        keyword_match =3D keywordMatch(mode, match);
        if (keyword_match) {
          keyword_count +=3D keyword_match[1];
          result +=3D '<span class=3D"'+ keyword_match[0] +'">' + =
escape(match[0]) + '</span>';
        } else {
          result +=3D escape(match[0]);
        }
        last_index =3D mode.lexemsRe.lastIndex;
        match =3D mode.lexemsRe.exec(buffer);
      }
      result +=3D escape(buffer.substr(last_index, buffer.length - =
last_index));
      return result;
    }

    function processBuffer(buffer, mode) {
      if (mode.subLanguage && selected_languages[mode.subLanguage]) {
        var result =3D highlight(mode.subLanguage, buffer);
        keyword_count +=3D result.keyword_count;
        relevance +=3D result.relevance;
        return result.value;
      } else {
        return processKeywords(buffer, mode);
      }
    }

    function startNewMode(mode, lexem) {
      if (mode.returnBegin) {
        result +=3D '<span class=3D"' + mode.className + '">';
        mode.buffer =3D '';
      } else if (mode.excludeBegin) {
        result +=3D escape(lexem) + '<span class=3D"' + mode.className + =
'">';
        mode.buffer =3D '';
      } else {
        result +=3D '<span class=3D"' + mode.className + '">';
        mode.buffer =3D lexem;
      }
      modes[modes.length] =3D mode;
    }

    function processModeInfo(buffer, lexem, end) {
      var current_mode =3D modes[modes.length - 1];
      if (end) {
        result +=3D processBuffer(current_mode.buffer + buffer, =
current_mode);
        return false;
      }

      var new_mode =3D subMode(lexem, current_mode);
      if (new_mode) {
        result +=3D processBuffer(current_mode.buffer + buffer, =
current_mode);
        startNewMode(new_mode, lexem);
        relevance +=3D new_mode.relevance;
        return new_mode.returnBegin;
      }

      var end_level =3D endOfMode(modes.length - 1, lexem);
      if (end_level) {
        if (current_mode.returnEnd) {
          result +=3D processBuffer(current_mode.buffer + buffer, =
current_mode) + '</span>';
        } else if (current_mode.excludeEnd) {
          result +=3D processBuffer(current_mode.buffer + buffer, =
current_mode) + '</span>' + escape(lexem);
        } else {
          result +=3D processBuffer(current_mode.buffer + buffer + =
lexem, current_mode) + '</span>';
        }
        while (end_level > 1) {
          result +=3D '</span>';
          end_level--;
          modes.length--;
        }
        modes.length--;
        modes[modes.length - 1].buffer =3D '';
        if (current_mode.starts) {
          for (var i =3D 0; i < language.modes.length; i++) {
            if (language.modes[i].className =3D=3D current_mode.starts) =
{
              startNewMode(language.modes[i], '');
              break;
            }
          }
        }
        return current_mode.returnEnd;
      }

      if (isIllegal(lexem, current_mode))
        throw 'Illegal';
    }

    var language =3D LANGUAGES[language_name];
    var modes =3D [language.defaultMode];
    var relevance =3D 0;
    var keyword_count =3D 0;
    var result =3D '';
    try {
      var index =3D 0;
      language.defaultMode.buffer =3D '';
      do {
        var mode_info =3D eatModeChunk(value, index);
        var return_lexem =3D processModeInfo(mode_info[0], mode_info[1], =
mode_info[2]);
        index +=3D mode_info[0].length;
        if (!return_lexem) {
          index +=3D mode_info[1].length;
        }
      } while (!mode_info[2]);
      if(modes.length > 1)
        throw 'Illegal';
      return {
        relevance: relevance,
        keyword_count: keyword_count,
        value: result
      }
    } catch (e) {
      if (e =3D=3D 'Illegal') {
        return {
          relevance: 0,
          keyword_count: 0,
          value: escape(value)
        }
      } else {
        throw e;
      }
    }
  }

  function blockText(block) {
    var result =3D '';
    for (var i =3D 0; i < block.childNodes.length; i++)
      if (block.childNodes[i].nodeType =3D=3D 3)
        result +=3D block.childNodes[i].nodeValue;
      else if (block.childNodes[i].nodeName =3D=3D 'BR')
        result +=3D '\n';
      else
        throw 'No highlight';
    return result;
  }

  function blockLanguage(block) {
    var classes =3D block.className.split(/\s+/);
    for (var i =3D 0; i < classes.length; i++) {
      if (classes[i] =3D=3D 'no-highlight') {
        throw 'No highlight'
      }
      if (LANGUAGES[classes[i]]) {
        return classes[i];
      }
    }
  }

  function highlightBlock(block) {
    try {
      var text =3D blockText(block);
      var language =3D blockLanguage(block);
    } catch (e) {
      if (e =3D=3D 'No highlight')
        return;
    }

    if (language) {
      var result =3D highlight(language, text).value;
    } else {
      var max_relevance =3D 2;
      var relevance =3D 0;
      for (var key in selected_languages) {
        var r =3D highlight(key, text);
        relevance =3D r.keyword_count + r.relevance;
        if (relevance > max_relevance) {
          max_relevance =3D relevance;
          var result =3D r.value;
          language =3D key;
        }
      }
    }

    if (result) {
      var className =3D block.className;
      if (!className.match(language)) {
        className +=3D ' ' + language;
      }
      // See these 4 lines? This is IE's notion of "block.innerHTML =3D =
result". Love this browser :-/
      var container =3D document.createElement('div');
      container.innerHTML =3D '<pre><code class=3D"' + className + '">' =
+ result + '</code></pre>';
      var environment =3D block.parentNode.parentNode;
      environment.replaceChild(container.firstChild, block.parentNode);
    }
  }

  function langRe(language, value, global) {
    var mode =3D  'm' + (language.case_insensitive ? 'i' : '') + (global =
? 'g' : '');
    return new RegExp(value, mode);
  }

  function compileModes() {
    for (var i in LANGUAGES) {
      var language =3D LANGUAGES[i];
      for (var key in language.modes) {
        if (language.modes[key].begin)
          language.modes[key].beginRe =3D langRe(language, '^' + =
language.modes[key].begin);
        if (language.modes[key].end)
          language.modes[key].endRe =3D langRe(language, '^' + =
language.modes[key].end);
        if (language.modes[key].illegal)
          language.modes[key].illegalRe =3D langRe(language, '^(?:' + =
language.modes[key].illegal + ')');
        language.defaultMode.illegalRe =3D langRe(language, '^(?:' + =
language.defaultMode.illegal + ')');
        if (language.modes[key].relevance =3D=3D undefined) {
          language.modes[key].relevance =3D 1;
        }
      }
    }
  }

  function compileKeywords() {

    function compileModeKeywords(mode) {
      if (!mode.keywordGroups) {
        for (var key in mode.keywords) {
          if (mode.keywords[key] instanceof Object)
            mode.keywordGroups =3D mode.keywords;
          else
            mode.keywordGroups =3D {'keyword': mode.keywords};
          break;
        }
      }
    }

    for (var i in LANGUAGES) {
      var language =3D LANGUAGES[i];
      compileModeKeywords(language.defaultMode);
      for (var key in language.modes) {
        compileModeKeywords(language.modes[key]);
      }
    }
  }

  function initHighlighting() {
    if (initHighlighting.called)
      return;
    initHighlighting.called =3D true;
    compileModes();
    compileKeywords();
    if (arguments.length) {
      for (var i =3D 0; i < arguments.length; i++) {
        if (LANGUAGES[arguments[i]]) {
          selected_languages[arguments[i]] =3D LANGUAGES[arguments[i]];
        }
      }
    } else
      selected_languages =3D LANGUAGES;
    var pres =3D document.getElementsByTagName('pre');
    for (var i =3D 0; i < pres.length; i++) {
      if (pres[i].firstChild && pres[i].firstChild.nodeName =3D=3D =
'CODE')
        highlightBlock(pres[i].firstChild);
    }
  }

  function injectScripts(languages) {
    var scripts =3D document.getElementsByTagName('SCRIPT');
    for (var i=3D0; i < scripts.length; i++) {
      if (scripts[i].src.match(/highlight\.js(\?.+)?$/)) {
        var path =3D scripts[i].src.replace(/highlight\.js(\?.+)?$/, =
'');
        break;
      }
    }
    if (languages.length =3D=3D 0) {
      languages =3D DEFAULT_LANGUAGES;
    }
    var injected =3D {}
    for (var i=3D0; i < languages.length; i++) {
      var filename =3D LANGUAGE_GROUPS[languages[i]] ? =
LANGUAGE_GROUPS[languages[i]] : languages[i];
      if (!injected[filename]) {
        document.write('<script type=3D"text/javascript" src=3D"' + path =
+ 'languages/' + filename + '.js"></script>');
        injected[filename] =3D true;
      }
    }
  }

  function initHighlightingOnLoad() {
    var original_arguments =3D arguments;
    injectScripts(arguments);
    var handler =3D function(){initHighlighting.apply(null, =
original_arguments)};
    if (window.addEventListener) {
      window.addEventListener('DOMContentLoaded', handler, false);
      window.addEventListener('load', handler, false);
    } else if (window.attachEvent)
      window.attachEvent('onload', handler);
    else
      window.onload =3D handler;
  }

  function hightlightAllInBlock(block_id){
  	//alert(document.getElementById(block_id));
	obj =3D document.getElementById(block_id);
	var pres =3D obj.getElementsByTagName('pre');

    for (var i =3D 0; i < pres.length; i++) {
      if (pres[i].firstChild && pres[i].firstChild.nodeName =3D=3D =
'CODE')
        highlightBlock(pres[i].firstChild);
    }
  }

  this.hightlightAllInBlock =3D hightlightAllInBlock;

  this.LANGUAGES =3D LANGUAGES;
  this.ALL_LANGUAGES =3D ALL_LANGUAGES;
  this.initHighlightingOnLoad =3D initHighlightingOnLoad;
  this.highlightBlock =3D highlightBlock;

  // Common regexps
  this.IDENT_RE =3D '[a-zA-Z][a-zA-Z0-9_]*';
  this.UNDERSCORE_IDENT_RE =3D '[a-zA-Z_][a-zA-Z0-9_]*';
  this.NUMBER_RE =3D '\\b\\d+(\\.\\d+)?';
  this.C_NUMBER_RE =3D '\\b(0x[A-Za-z0-9]+|\\d+(\\.\\d+)?)';

  // Common modes
  this.APOS_STRING_MODE =3D {
    className: 'string',
    begin: '\'', end: '\'',
    illegal: '\\n',
    contains: ['escape'],
    relevance: 0
  };
  this.QUOTE_STRING_MODE =3D {
    className: 'string',
    begin: '"', end: '"',
    illegal: '\\n',
    contains: ['escape'],
    relevance: 0
  };
  this.BACKSLASH_ESCAPE =3D {
    className: 'escape',
    begin: '\\\\.', end: '^',
    relevance: 0
  };
  this.C_LINE_COMMENT_MODE =3D {
    className: 'comment',
    begin: '//', end: '$',
    relevance: 0
  };
  this.C_BLOCK_COMMENT_MODE =3D {
    className: 'comment',
    begin: '/\\*', end: '\\*/'
  };
  this.HASH_COMMENT_MODE =3D {
    className: 'comment',
    begin: '#', end: '$'
  };
  this.C_NUMBER_MODE =3D {
    className: 'number',
    begin: this.C_NUMBER_RE, end: '^',
    relevance: 0
  };
}();

var initHighlightingOnLoad =3D hljs.initHighlightingOnLoad;
------=_NextPart_000_00AD_01CDE351.E53E8BB0
Content-Type: application/octet-stream
Content-Transfer-Encoding: quoted-printable
Content-Location: http://sql-ex.ru/js/main.js

function changeSt(layerRef)
{
 var strObj=3Ddocument.getElementById(layerRef);
 if(strObj.style.display=3D=3D"none")
 { // =EF=EE=EA=E0=E7=E0=F2=FC
    strObj.style.display=3D"inline";
//    strObj.style.textAlign=3D"left";
    document.images["img"+layerRef].src=3D"/images/bluedrop.gif";
    if(layerRef=3D=3D'rat'){
    document.fm1.nn.focus();
    document.fm1.nn.select();
    				   }
 }
 else
 { // =F1=EF=F0=FF=F2=E0=F2=FC
    strObj.focus();
    strObj.style.display=3D"none";
    document.images["img"+layerRef].src=3D"/images/blueup.gif";
 }
}

function URLreplace(namev, val)
{
	var n =3D document.URL.indexOf(namev);
	var m =3D document.URL.indexOf("#");
	var strll, docURL=3Ddocument.URL;
	if (m>0){
	  strll=3Ddocument.URL.substring(m, document.URL.length);
	  docURL=3Ddocument.URL.substring(0,m);
	}
	if (n>0){
	  var strl=3DdocURL.substr(0, n+namev.length);
	  var strr=3DdocURL.substring(n+namev.length, docURL.length);
	  var namp=3Dstrr.indexOf("&");
	  if (namp>0)
		strr=3Dstrr.substring(namp,strr.length);
	  else
		strr=3D"";
	  result=3Dstrl + "=3D" + val + strr;
	}
	else{
	  if(docURL.indexOf("?")>0)
		result=3DdocURL + "&" +namev + "=3D" + val;
	  else
		result=3DdocURL + "?" +namev + "=3D" + val;
	}
	if (m>0)
	  result+=3Dstrll;
	return result;
}

function Sel_Lang(Index)
{
	document.location=3DURLreplace("Lang", Index);
	try{
	   Help_Win.document.location.replace();
	}catch(e){}
}

function openHelp(helpDoc)
{
	var hwin=3Dscreen.width/2-screen.width/20;
	var xwin=3Dscreen.width/2+screen.width/20-15;
	var ywin=3Dscreen.height-screen.height/10;
	var =
brzFeatures=3D"directories=3Dno,location=3Dno,menubar=3Dno,status=3Dno,re=
sizable=3Dyes,dependent=3Dyes,scrollbars=3Dyes,top=3D0,left=3D"+hwin+",wi=
dth=3D"+xwin+",height=3D"+ywin;
//	alert("#"+helpDoc+"#");
	if(helpDoc=3D=3Dundefined) // =AF=AE=AF=EB=E2=A0=E2=EC=E1=EF =
=AD=A0=A9=E2=A8 =AE=E2=AA=E0=EB=E2=AE=A5 =AE=AA=AD=AE =A8 focus() =A2 =
=AD=A5=A3=AE
	{
	 try{
	   Help_Win.focus();
	 }catch(e)
	 {
	  Help_Win=3Dwindow.open('/help/select0.php', "Help_Win",brzFeatures);
	  Help_Win.focus();
	//  alert('error '+e);
	 }
	}
	else{
	  Help_Win=3Dwindow.open(helpDoc, "Help_Win",brzFeatures);
	  Help_Win.focus();
	}
}

function openPhoto(photo,lgn)
{
	var hwin=3Dscreen.width/3;
	var xwin=3D150;
	var ywin=3D180;
	var =
brzBars=3D'titlebar=3Dno,directories=3Dno,location=3Dno,menubar=3Dno,stat=
us=3Dno,alwaysRaised=3Dno,';
	var =
brzWin=3D'resizable=3Dyes,dependent=3Dyes,scrollbars=3Dno,ScreenY=3D'+hwi=
n+',ScreenX=3D'+hwin+',width=3D'+xwin+',height=3D'+ywin;
	var wlgn=3Dnew String(lgn);
	wlgn=3Dwlgn.replace(" ","_");
	//alert(lgn+" |"+wlgn+" |"+photo);
	var PhWin=3Dopen("", "photo",brzBars+brzWin);
	PhWin.document.writeln('<title>'+wlgn+'</title>');
	PhWin.document.writeln('<body><img src=3D"'+photo+'" =
width=3D"130"></body>');
	PhWin.document.close();
	PhWin.moveTo(hwin,hwin);
	PhWin.focus();
//	return false;
}
------=_NextPart_000_00AD_01CDE351.E53E8BB0
Content-Type: application/octet-stream
Content-Transfer-Encoding: quoted-printable
Content-Location: http://cnt.rambler.ru/top100.jcn?718545

(function(window){var =
f=3D!0,i=3D!1,j,k=3Dthis;Math.floor(2147483648*Math.random()).toString(36=
);function =
l(a,b){this.width=3Da;this.height=3Db}l.prototype.toString=3Dfunction(){r=
eturn this.width+"x"+this.height};var =
aa=3D/^[a-zA-Z0-9\-_.!~*'()]*$/;function =
m(a){a=3D""+a;return!aa.test(a)?encodeURIComponent(a):a};function =
o(){this.e=3D{};this.i=3D[]}j=3Do.prototype;j.a=3D0;j.j=3Dfunction(){retu=
rn this.a};j.c=3Dfunction(a){return =
Object.prototype.hasOwnProperty.call(this.e,a)};j.set=3Dfunction(a,b){Obj=
ect.prototype.hasOwnProperty.call(this.e,a)||(this.a++,this.i.push(a));th=
is.e[a]=3Db};j.get=3Dfunction(a,b){return =
Object.prototype.hasOwnProperty.call(this.e,a)?this.e[a]:b};j.h=3Dfunctio=
n(){return this.i.concat()};j.d=3Dfunction(){for(var =
a=3D[],b=3D0;b<this.i.length;b++)a.push(this.e[this.i[b]]);return a};var =
p=3DArray.prototype;function q(a){return =
p.concat.apply(p,arguments)};function r(a){this.b=3Dnew =
o;this.q=3D!!a}j=3Dr.prototype;j.a=3D0;j.j=3Dfunction(){return =
this.a};j.c=3Dfunction(a){a=3Ds(this,a);return =
this.b.c(a)};j.h=3Dfunction(){for(var =
a=3Dthis.b.d(),b=3Dthis.b.h(),c=3D[],e=3D0;e<b.length;e++)for(var =
g=3Da[e],d=3D0;d<g.length;d++)c.push(b[e]);return =
c};j.d=3Dfunction(a){var =
b=3D[];if(a)this.c(a)&&(b=3Dq(b,this.b.get(s(this,a))));else for(var =
a=3Dthis.b.d(),c=3D0;c<a.length;c++)b=3Dq(b,a[c]);return b};=0A=
j.set=3Dfunction(a,b){a=3Ds(this,a);this.c(a)&&(this.a-=3Dthis.b.get(a).l=
ength);this.b.set(a,[b]);this.a++;return this};j.get=3Dfunction(a,b){var =
c=3Da?this.d(a):[];return 0<c.length?c[0]:b};function s(a,b){var =
c=3D""+b;a.q&&(c=3Dc.toLowerCase());return =
c}j.toString=3Dfunction(){if(!this.a)return"";for(var =
a=3D[],b=3Dthis.b.h(),c=3D0;c<b.length;c++)for(var =
e=3Db[c],g=3Dm(e),e=3Dthis.d(e),d=3D0;d<e.length;d++){var =
h=3Dg;""!=3D=3De[d]&&(h+=3D"=3D"+m(e[d]));a.push(h)}return =
a.join("&")};var t,u,v,w,x;function y(){return =
k.navigator?k.navigator.userAgent:null}function z(){return =
k.navigator}x=3Dw=3Dv=3Du=3Dt=3Di;var A;if(A=3Dy()){var =
ba=3Dz();x=3D0=3D=3DA.indexOf("Opera");t=3D!x&&-1!=3DA.indexOf("MSIE");w=3D=
(v=3D!x&&-1!=3DA.indexOf("WebKit"))&&-1!=3DA.indexOf("Mobile");u=3D!x&&!v=
&&"Gecko"=3D=3Dba.product}var ca=3Dt,da=3Du,B=3Dv,ea=3Dw;var =
C;if(x&&k.opera){var D=3Dk.opera.version;"function"=3D=3Dtypeof =
D&&D()}else =
da?C=3D/rv\:([^\);]+)(\)|;)/:ca?C=3D/MSIE\s+([^\);]+)(\)|;)/:B&&(C=3D/Web=
Kit\/(\S+)/),C&&C.exec(y());function fa(a){this.f=3Da}var =
E=3D/\s*;\s*/;j=3Dfa.prototype;j.get=3Dfunction(a,b){for(var =
c=3Da+"=3D",e=3D(this.f.cookie||"").split(E),g=3D0,d;d=3De[g];g++)if(0=3D=
=3Dd.indexOf(c))return d.substr(c.length);return b};=0A=
j.set=3Dfunction(a,b,c,e,g,d){if(/[;=3D\s]/.test(a))throw Error('Invalid =
cookie name "'+a+'"');if(/[;\r\n]/.test(b))throw Error('Invalid cookie =
value =
"'+b+'"');this.f.cookie=3Da+"=3D"+b+(g?";domain=3D"+g:"")+(e?";path=3D"+e=
:"")+(c instanceof =
Date?";expires=3D"+c.toUTCString():0>c?"":0=3D=3Dc?";expires=3D"+(new =
Date(1970,1,1)).toUTCString():";expires=3D"+(new Date(+new =
Date+1E3*c)).toUTCString())+(d?";secure":"")};j.remove=3Dfunction(a,b,c){=
var e=3Dthis.c(a);this.set(a,"",0,b,c);return e};j.h=3Dfunction(){return =
ga(this).keys};=0A=
j.d=3Dfunction(){return =
ga(this).t};j.j=3Dfunction(){return!this.f.cookie?0:(this.f.cookie||"").s=
plit(E).length};j.c=3Dfunction(a){return void =
0!=3D=3Dthis.get(a)};function ga(a){for(var =
a=3D(a.f.cookie||"").split(E),b=3D[],c=3D[],e,g,d=3D0;g=3Da[d];d++)e=3Dg.=
indexOf("=3D"),-1=3D=3De?(b.push(""),c.push(g)):(b.push(g.substring(0,e))=
,c.push(g.substring(e+1)));return{keys:b,t:c}}j.isEnabled=3Dfunction(){va=
r a=3Dnavigator.cookieEnabled;if(a&&B){var b=3D"COOKIE_TEST_"+ +new =
Date;ha.set(b,"1");if(!this.get(b))return i;this.remove(b)}return a};=0A=
var ha=3Dnew fa(document);var F=3Di,G=3D"";function =
H(a){a=3Da.match(/[\d]+/g);a.length=3D3;return a[0]+"."+a[1]+" =
r"+a[2]}var I=3Dz();=0A=
if(I.plugins&&I.plugins.length){var J=3DI.plugins["Shockwave =
Flash"];J&&(F=3Df,J.description&&(G=3DH(J.description)));I.plugins["Shock=
wave Flash 2.0"]&&(F=3Df,G=3D"2.0.0.11")}else =
if(I.mimeTypes&&I.mimeTypes.length){var =
K=3DI.mimeTypes["application/x-shockwave-flash"];(F=3D!(!K||!K.enabledPlu=
gin))&&(G=3DH(K.enabledPlugin.description))}else try{var L=3Dnew =
ActiveXObject("ShockwaveFlash.ShockwaveFlash.7"),F=3Df,G=3DH(L.GetVariabl=
e("$version"))}catch(ia){try{L=3Dnew =
ActiveXObject("ShockwaveFlash.ShockwaveFlash.6"),F=3Df,G=3D"6.0.21",=0A=
L.v=3D"always",G=3DH(L.GetVariable("$version"))}catch(ja){try{L=3Dnew =
ActiveXObject("ShockwaveFlash.ShockwaveFlash"),F=3Df,G=3DH(L.GetVariable(=
"$version"))}catch(ka){}}}var la=3DG;var =
ma=3D["application/x-silverlight","application/x-silverlight-2","applicat=
ion/x-silverlight-2-b2","application/x-silverlight-2-b1"],M=3Di,N=3D"";fu=
nction O(a){return"1.0.30226.2"=3D=3Da?"2.0.30226.2":a}var P=3Dz();=0A=
if(P.plugins&&P.plugins.length){var Q=3DP.plugins["Silverlight =
Plug-In"];Q&&(M=3Df,Q.description&&(N=3DO(Q.description)))}else =
if(P.mimeTypes&&P.mimeTypes.length)for(var R=3D0;R<ma.length;R++){var =
S=3DP.mimeTypes[ma[R]];if(S&&S.enabledPlugin){(M=3D!!S.enabledPlugin)&&(N=
=3DO(S.enabledPlugin.description));break}}else{var =
T=3D[0,0,0,0];try{for(var na=3Dnew =
ActiveXObject("AgControl.AgControl"),M=3Df,R=3D0;R<T.length;R++){for(var =
U=3D0,V=3D1048575,oa=3D0;U<V;){var =
W=3DT[R]=3DU+(V-U>>1);na.IsVersionSupported(T.join("."))?(oa=3DW,U=3DW+1)=
:=0A=
V=3DW}T[R]=3Doa}N=3DO(T.join("."))}catch(pa){}}var qa=3DN;var =
X=3D"0.3";function =
Y(a,b){this.g=3Db||"";this.o=3Dthis.n=3Dthis.p=3Df;this.s=3D0;this.r=3D25=
0;this.l=3Dnew =
r}Y.prototype.k=3D("https:"=3D=3Ddocument.location.protocol?"https://s":"=
http://")+"counter.rambler.ru/top100.scn";Y.prototype.u=3D"http://top100.=
rambler.ru";Y.prototype.m=3D"Rambler's Top100";=0A=
function ra(a){var b=3DZ,c=3Dz(),e=3Ddocument,g=3Dk.screen,d=3Dnew =
r;d.set("rn",Math.round(2147483647*Math.random()));d.set("v",X);var =
h;h=3Dwindow;var n=3Dh.document;if(B&&!ea){void =
0!=3D=3Dh.innerHeight||(h=3Dwindow);var =
n=3Dh.innerHeight,ua=3Dh.document.documentElement.scrollHeight;h=3D=3Dh.t=
op&&ua<n&&(n-=3D15);h=3Dnew l(h.innerWidth,n)}else =
h=3D"CSS1Compat"=3D=3Dn.compatMode?n.documentElement:n.body,h=3Dnew =
l(h.clientWidth,h.clientHeight);d.set("bs",h.toString());d.set("ce",ha.is=
Enabled()?1:0);e&&(d.set("rf",e.referrer||""),d.set("en",=0A=
e.characterSet||e.charset||""),b.p&&d.set("pt",e.title.substring(0,b.r)))=
;g&&(d.set("cd",g.colorDepth+"-bit"),d.set("sr",g.width+"x"+g.height));c&=
&(d.set("la",c.language||c.browserLanguage||""),d.set("ja",c.javaEnabled(=
)?1:0),d.set("acn",c.appCodeName),d.set("an",c.appName),d.set("pl",c.plat=
form));d.set("tz",(new Date).getTimezoneOffset());"string"=3D=3Dtypeof =
a&&d.set("url",a);b.n&&d.set("fv",la);b.o&&d.set("sv",qa);b.l.j()&&d.set(=
"cv",b.l.toString());return d}=0A=
function sa(){var a=3D$;return function(){ta(a)}}function va(){var =
a=3D$,b=3Dwa;return function(){k.clearTimeout(b||null);ta(a)}}function =
ta(a){a.onload=3Da.onerror=3Da.onabort=3Dnull;delete a};var =
X=3DX+"i",Z=3Dnew Y(0,"718545");if(parseInt("1",10)){var =
xa=3Dra();xa.set("le",0);document.write('<a =
href=3D"'+(Z.u+(Z.g?"/home?id=3D"+Z.g:""))+'" target=3D"_blank"><img =
src=3D"'+(Z.k+"?"+Z.g+"&"+xa.toString())+'" title=3D"'+Z.m+'" =
alt=3D"'+Z.m+'" border=3D"0" /></a>')}else{var ya=3Dra(void =
0);ya.set("le",1);var za=3DZ,Aa=3DZ.k+"?"+Z.g+"&"+ya.toString(),$=3Dnew =
Image(1,1),Ba=3Dza.s,wa=3Dnull,Ca=3Dsa();0<Ba&&(wa=3Dk.setTimeout(Ca,Ba))=
;var =
Da=3Dva();$.onerror=3D$.onabort=3DCa;$.onload=3DDa;$.src=3DAa};})(window)=0A=

------=_NextPart_000_00AD_01CDE351.E53E8BB0--
